import { NodeTemplate, TemplateCategory } from '../types/studio.js';

// Pre-built workflow templates
export const WORKFLOW_TEMPLATES: NodeTemplate[] = [
  // Business Process Templates
  {
    id: 'user-onboarding',
    name: 'User Onboarding Process',
    description: 'Complete user onboarding workflow with email verification, profile setup, and welcome notifications',
    category: 'business-process',
    icon: '👤',
    tags: ['onboarding', 'user', 'email', 'notification'],
    nodes: [
      {
        type: 'start',
        position: { x: 100, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Start',
          description: 'User registration initiated',
          icon: '▶️',
          properties: {},
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0x10b981,
          borderColor: 0x059669,
          borderWidth: 2,
          borderRadius: 20,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'bold',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'email',
        position: { x: 300, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Send Verification',
          description: 'Send email verification',
          icon: '📧',
          properties: {
            to: '{{user.email}}',
            subject: 'Verify Your Email',
            body: 'Click the link to verify your email: {{verificationLink}}',
            attachments: [],
          },
          category: 'communication',
        },
        style: {
          backgroundColor: 0x3b82f6,
          borderColor: 0x2563eb,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'wait',
        position: { x: 500, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Wait for Verification',
          description: 'Wait for user to verify email',
          icon: '⏳',
          properties: {
            condition: 'user.emailVerified === true',
            timeout: 86400000, // 24 hours
          },
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0x64748b,
          borderColor: 0x475569,
          borderWidth: 2,
          borderRadius: 20,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'action',
        position: { x: 700, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Setup Profile',
          description: 'Initialize user profile',
          icon: '⚡',
          properties: {
            actionType: 'database',
            timeout: 30000,
            retryCount: 3,
          },
          category: 'business-logic',
        },
        style: {
          backgroundColor: 0x3b82f6,
          borderColor: 0x2563eb,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'notification',
        position: { x: 900, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Welcome Message',
          description: 'Send welcome notification',
          icon: '🔔',
          properties: {
            title: 'Welcome!',
            message: 'Your account has been set up successfully.',
            type: 'success',
            channels: ['email', 'sms'],
          },
          category: 'communication',
        },
        style: {
          backgroundColor: 0xf59e0b,
          borderColor: 0xd97706,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'end',
        position: { x: 1100, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Complete',
          description: 'Onboarding completed',
          icon: '⏹️',
          properties: {},
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0xef4444,
          borderColor: 0xdc2626,
          borderWidth: 2,
          borderRadius: 20,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'bold',
          shadow: true,
          opacity: 1,
        },
      },
    ],
    connections: [
      {
        sourceId: 'start-onboarding',
        targetId: 'email-verification',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'email-verification',
        targetId: 'wait-verification',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'wait-verification',
        targetId: 'profile-setup',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'profile-setup',
        targetId: 'welcome-notification',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'welcome-notification',
        targetId: 'end-onboarding',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
    ],
    viewport: { x: 0, y: 0, zoom: 1 },
    createdAt: new Date('2024-01-15'),
    updatedAt: new Date('2024-01-15'),
    author: 'System',
    version: '1.0.0',
  },

  // Data Pipeline Templates
  {
    id: 'data-etl-pipeline',
    name: 'ETL Data Pipeline',
    description: 'Extract, Transform, Load data pipeline with validation and error handling',
    category: 'data-pipeline',
    icon: '🔄',
    tags: ['etl', 'data', 'pipeline', 'validation'],
    nodes: [
      {
        type: 'start',
        position: { x: 100, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Start ETL',
          description: 'Begin data extraction',
          icon: '▶️',
          properties: {},
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0x10b981,
          borderColor: 0x059669,
          borderWidth: 2,
          borderRadius: 20,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'bold',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'database',
        position: { x: 300, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Extract Data',
          description: 'Extract data from source',
          icon: '🗄️',
          properties: {
            operation: 'select',
            table: 'source_table',
            query: 'SELECT * FROM source_table WHERE updated_at > :last_run',
          },
          category: 'database-storage',
        },
        style: {
          backgroundColor: 0x64748b,
          borderColor: 0x475569,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'data-validation',
        position: { x: 500, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Validate Data',
          description: 'Validate extracted data',
          icon: '✅',
          properties: {
            rules: [
              { field: 'id', rule: 'required', message: 'ID is required' },
              { field: 'email', rule: 'email', message: 'Invalid email format' },
            ],
            strict: false,
          },
          category: 'data-processing',
        },
        style: {
          backgroundColor: 0xec4899,
          borderColor: 0xdb2777,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'data-transform',
        position: { x: 700, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Transform Data',
          description: 'Transform data format',
          icon: '🔄',
          properties: {
            transformation: `
              return data.map(item => ({
                ...item,
                fullName: \`\${item.firstName} \${item.lastName}\`,
                processedAt: new Date().toISOString()
              }));
            `,
            inputFormat: 'json',
            outputFormat: 'json',
          },
          category: 'data-processing',
        },
        style: {
          backgroundColor: 0xf59e0b,
          borderColor: 0xd97706,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'database',
        position: { x: 900, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Load Data',
          description: 'Load transformed data',
          icon: '🗄️',
          properties: {
            operation: 'insert',
            table: 'target_table',
            query: 'INSERT INTO target_table VALUES :data',
          },
          category: 'database-storage',
        },
        style: {
          backgroundColor: 0x64748b,
          borderColor: 0x475569,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'notification',
        position: { x: 1100, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Notify Success',
          description: 'Send success notification',
          icon: '🔔',
          properties: {
            title: 'ETL Complete',
            message: 'Data pipeline executed successfully',
            type: 'success',
            channels: ['email'],
          },
          category: 'communication',
        },
        style: {
          backgroundColor: 0xf59e0b,
          borderColor: 0xd97706,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'end',
        position: { x: 1300, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'ETL Complete',
          description: 'ETL process finished',
          icon: '⏹️',
          properties: {},
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0xef4444,
          borderColor: 0xdc2626,
          borderWidth: 2,
          borderRadius: 20,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'bold',
          shadow: true,
          opacity: 1,
        },
      },
    ],
    connections: [
      {
        sourceId: 'extract-start',
        targetId: 'extract-data',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'extract-data',
        targetId: 'validate-data',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'validate-data',
        targetId: 'transform-data',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'transform-data',
        targetId: 'load-data',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'load-data',
        targetId: 'send-notification',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'send-notification',
        targetId: 'etl-complete',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
    ],
    viewport: { x: 0, y: 0, zoom: 1 },
    createdAt: new Date('2024-01-15'),
    updatedAt: new Date('2024-01-15'),
    author: 'System',
    version: '1.0.0',
  },

  // AI Workflow Templates
  {
    id: 'content-moderation',
    name: 'AI Content Moderation',
    description: 'Automated content moderation using AI for text analysis and image processing',
    category: 'ai-workflow',
    icon: '🤖',
    tags: ['ai', 'moderation', 'content', 'text', 'image'],
    nodes: [
      {
        type: 'webhook',
        position: { x: 100, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Content Received',
          description: 'Receive content via webhook',
          icon: '📥',
          properties: {
            endpoint: '/api/content-moderate',
            secret: '{{webhook_secret}}',
          },
          category: 'integration',
        },
        style: {
          backgroundColor: 0x3b82f6,
          borderColor: 0x2563eb,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'sentiment-analysis',
        position: { x: 300, y: 50 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Analyze Text',
          description: 'Analyze text sentiment',
          icon: '😊',
          properties: {
            model: 'sentiment-model-v1',
            text: '{{content.text}}',
            language: 'en',
          },
          category: 'ai-ml',
        },
        style: {
          backgroundColor: 0xec4899,
          borderColor: 0xdb2777,
          borderWidth: 2,
          borderRadius: 12,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'image-processing',
        position: { x: 300, y: 150 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Analyze Image',
          description: 'Analyze image content',
          icon: '🖼️',
          properties: {
            operation: 'analyze',
            model: 'image-analysis-v1',
            imageUrl: '{{content.imageUrl}}',
          },
          category: 'ai-ml',
        },
        style: {
          backgroundColor: 0xf97316,
          borderColor: 0xea580c,
          borderWidth: 2,
          borderRadius: 12,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'decision',
        position: { x: 500, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Check Moderation',
          description: 'Decide if content passes moderation',
          icon: '🔀',
          properties: {
            conditions: [
              {
                expression: 'sentiment.score < 0.3 && !imageAnalysis.containsInappropriate',
                label: 'Safe Content'
              }
            ],
            defaultPath: 'false',
          },
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0xf59e0b,
          borderColor: 0xd97706,
          borderWidth: 2,
          borderRadius: 4,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'action',
        position: { x: 700, y: 50 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Approve Content',
          description: 'Mark content as approved',
          icon: '⚡',
          properties: {
            actionType: 'database',
            timeout: 30000,
            retryCount: 3,
          },
          category: 'business-logic',
        },
        style: {
          backgroundColor: 0x10b981,
          borderColor: 0x059669,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'action',
        position: { x: 700, y: 150 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Reject Content',
          description: 'Mark content as rejected',
          icon: '⚡',
          properties: {
            actionType: 'database',
            timeout: 30000,
            retryCount: 3,
          },
          category: 'business-logic',
        },
        style: {
          backgroundColor: 0xef4444,
          borderColor: 0xdc2626,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'webhook-response',
        position: { x: 900, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Send Response',
          description: 'Send moderation result',
          icon: '📤',
          properties: {
            statusCode: 200,
            headers: { 'Content-Type': 'application/json' },
            body: '{"status": "{{moderationResult}}", "contentId": "{{content.id}}"}',
          },
          category: 'communication',
        },
        style: {
          backgroundColor: 0x8b5cf6,
          borderColor: 0x7c3aed,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
    ],
    connections: [
      {
        sourceId: 'content-received',
        targetId: 'text-analysis',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'content-received',
        targetId: 'image-analysis',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'text-analysis',
        targetId: 'moderation-decision',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'image-analysis',
        targetId: 'moderation-decision',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'moderation-decision',
        targetId: 'approve-content',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: 'Approved',
        style: {
          color: 0x10b981,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'moderation-decision',
        targetId: 'reject-content',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: 'Rejected',
        style: {
          color: 0xef4444,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'approve-content',
        targetId: 'send-response',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'reject-content',
        targetId: 'send-response',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
    ],
    viewport: { x: 0, y: 0, zoom: 1 },
    createdAt: new Date('2024-01-15'),
    updatedAt: new Date('2024-01-15'),
    author: 'System',
    version: '1.0.0',
  },

  // Integration Templates
  {
    id: 'api-orchestration',
    name: 'API Orchestration',
    description: 'Orchestrate multiple API calls with error handling and response aggregation',
    category: 'integration',
    icon: '🔗',
    tags: ['api', 'orchestration', 'error-handling', 'aggregation'],
    nodes: [
      {
        type: 'start',
        position: { x: 100, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'API Request',
          description: 'Receive API orchestration request',
          icon: '▶️',
          properties: {},
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0x10b981,
          borderColor: 0x059669,
          borderWidth: 2,
          borderRadius: 20,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'bold',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'parallel',
        position: { x: 300, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Parallel APIs',
          description: 'Execute multiple APIs in parallel',
          icon: '⚡',
          properties: {
            branches: 3,
            waitForAll: true,
          },
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0x84cc16,
          borderColor: 0x65a30d,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'api-call',
        position: { x: 500, y: 50 },
        size: { width: 120, height: 60 },
        data: {
          label: 'User Service',
          description: 'Call user service API',
          icon: '🌐',
          properties: {
            url: 'https://api.example.com/users/{{userId}}',
            method: 'GET',
            headers: { 'Authorization': 'Bearer {{token}}' },
            timeout: 30000,
          },
          category: 'integration',
        },
        style: {
          backgroundColor: 0x10b981,
          borderColor: 0x059669,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'api-call',
        position: { x: 500, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Product Service',
          description: 'Call product service API',
          icon: '🌐',
          properties: {
            url: 'https://api.example.com/products',
            method: 'GET',
            headers: { 'Authorization': 'Bearer {{token}}' },
            timeout: 30000,
          },
          category: 'integration',
        },
        style: {
          backgroundColor: 0x3b82f6,
          borderColor: 0x2563eb,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'api-call',
        position: { x: 500, y: 150 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Order Service',
          description: 'Call order service API',
          icon: '🌐',
          properties: {
            url: 'https://api.example.com/orders/{{userId}}',
            method: 'GET',
            headers: { 'Authorization': 'Bearer {{token}}' },
            timeout: 30000,
          },
          category: 'integration',
        },
        style: {
          backgroundColor: 0x8b5cf6,
          borderColor: 0x7c3aed,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'data-transform',
        position: { x: 700, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Aggregate Data',
          description: 'Combine API responses',
          icon: '🔄',
          properties: {
            transformation: `
              return {
                user: responses.userApi,
                products: responses.productApi,
                orders: responses.orderApi,
                timestamp: new Date().toISOString()
              };
            `,
            inputFormat: 'json',
            outputFormat: 'json',
          },
          category: 'data-processing',
        },
        style: {
          backgroundColor: 0xf59e0b,
          borderColor: 0xd97706,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'webhook-response',
        position: { x: 900, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Send Response',
          description: 'Return aggregated data',
          icon: '📤',
          properties: {
            statusCode: 200,
            headers: { 'Content-Type': 'application/json' },
            body: '{{aggregatedData}}',
          },
          category: 'communication',
        },
        style: {
          backgroundColor: 0x8b5cf6,
          borderColor: 0x7c3aed,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
    ],
    connections: [
      {
        sourceId: 'api-start',
        targetId: 'parallel-apis',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'parallel-apis',
        targetId: 'user-api',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'parallel-apis',
        targetId: 'product-api',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'parallel-apis',
        targetId: 'order-api',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'user-api',
        targetId: 'aggregate-results',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'product-api',
        targetId: 'aggregate-results',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'order-api',
        targetId: 'aggregate-results',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'aggregate-results',
        targetId: 'send-response',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
    ],
    viewport: { x: 0, y: 0, zoom: 1 },
    createdAt: new Date('2024-01-15'),
    updatedAt: new Date('2024-01-15'),
    author: 'System',
    version: '1.0.0',
  },

  // Automation Templates
  {
    id: 'scheduled-backup',
    name: 'Scheduled Database Backup',
    description: 'Automated database backup with notifications and error handling',
    category: 'automation',
    icon: '⏰',
    tags: ['backup', 'database', 'scheduled', 'automation'],
    nodes: [
      {
        type: 'timer',
        position: { x: 100, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Daily Backup',
          description: 'Trigger daily at 2 AM',
          icon: '🕐',
          properties: {
            schedule: '0 2 * * *',
            timezone: 'UTC',
          },
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0x64748b,
          borderColor: 0x475569,
          borderWidth: 2,
          borderRadius: 12,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'database',
        position: { x: 300, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Backup DB',
          description: 'Create database backup',
          icon: '🗄️',
          properties: {
            operation: 'custom',
            table: '',
            query: 'BACKUP DATABASE main TO DISK = \'backup.bak\'',
          },
          category: 'database-storage',
        },
        style: {
          backgroundColor: 0x64748b,
          borderColor: 0x475569,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 's3-storage',
        position: { x: 500, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Upload to S3',
          description: 'Upload backup to cloud storage',
          icon: '☁️',
          properties: {
            operation: 'upload',
            bucket: 'backups-bucket',
            key: 'daily/{{timestamp}}.bak',
            region: 'us-east-1',
          },
          category: 'database-storage',
        },
        style: {
          backgroundColor: 0xf59e0b,
          borderColor: 0xd97706,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'action',
        position: { x: 700, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Verify Backup',
          description: 'Verify backup integrity',
          icon: '⚡',
          properties: {
            actionType: 'script',
            timeout: 300000,
            retryCount: 2,
          },
          category: 'business-logic',
        },
        style: {
          backgroundColor: 0x3b82f6,
          borderColor: 0x2563eb,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 's3-storage',
        position: { x: 900, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Cleanup Old',
          description: 'Remove backups older than 30 days',
          icon: '☁️',
          properties: {
            operation: 'delete',
            bucket: 'backups-bucket',
            key: 'daily/*',
            region: 'us-east-1',
          },
          category: 'database-storage',
        },
        style: {
          backgroundColor: 0xf97316,
          borderColor: 0xea580c,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'email',
        position: { x: 1100, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Send Report',
          description: 'Send backup completion report',
          icon: '📧',
          properties: {
            to: 'admin@example.com',
            subject: 'Daily Backup Report - {{date}}',
            body: 'Backup completed successfully at {{timestamp}}',
            attachments: [],
          },
          category: 'communication',
        },
        style: {
          backgroundColor: 0x3b82f6,
          borderColor: 0x2563eb,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
    ],
    connections: [
      {
        sourceId: 'schedule-trigger',
        targetId: 'backup-database',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'backup-database',
        targetId: 'upload-backup',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'upload-backup',
        targetId: 'verify-backup',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'verify-backup',
        targetId: 'cleanup-old',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'cleanup-old',
        targetId: 'send-report',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
    ],
    viewport: { x: 0, y: 0, zoom: 1 },
    createdAt: new Date('2024-01-15'),
    updatedAt: new Date('2024-01-15'),
    author: 'System',
    version: '1.0.0',
  },

  // Advanced AI/ML Templates
  {
    id: 'advanced-ml-pipeline',
    name: 'Advanced ML Training Pipeline',
    description: 'Complete machine learning pipeline with data preprocessing, model training, validation, and deployment',
    category: 'ai-workflow',
    icon: '🤖',
    tags: ['ml', 'training', 'pipeline', 'deployment', 'validation'],
    nodes: [
      {
        type: 'start',
        position: { x: 100, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Start Training',
          description: 'Initiate ML training pipeline',
          icon: '▶️',
          properties: {},
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0x10b981,
          borderColor: 0x059669,
          borderWidth: 2,
          borderRadius: 20,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'bold',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'data-transform',
        position: { x: 300, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Data Preprocessing',
          description: 'Clean and preprocess training data',
          icon: '🔄',
          properties: {
            transformation: `
              return data.map(item => ({
                ...item,
                normalizedFeatures: normalizeFeatures(item.features),
                encodedLabels: encodeLabels(item.labels),
                processedAt: new Date().toISOString()
              }));
            `,
            inputFormat: 'json',
            outputFormat: 'json',
          },
          category: 'data-processing',
        },
        style: {
          backgroundColor: 0xf59e0b,
          borderColor: 0xd97706,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'parallel',
        position: { x: 500, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Parallel Training',
          description: 'Train multiple models in parallel',
          icon: '⚡',
          properties: {
            branches: 3,
            waitForAll: true,
          },
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0x84cc16,
          borderColor: 0x65a30d,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'sentiment-analysis',
        position: { x: 700, y: 50 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Train Classifier',
          description: 'Train sentiment classification model',
          icon: '🧠',
          properties: {
            model: 'bert-sentiment-classifier',
            trainingData: '{{preprocessedData}}',
            epochs: 10,
            learningRate: 0.001,
          },
          category: 'ai-ml',
        },
        style: {
          backgroundColor: 0xec4899,
          borderColor: 0xdb2777,
          borderWidth: 2,
          borderRadius: 12,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'image-processing',
        position: { x: 700, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Train Vision Model',
          description: 'Train computer vision model',
          icon: '👁️',
          properties: {
            operation: 'train',
            model: 'resnet-image-classifier',
            dataset: '{{imageDataset}}',
            epochs: 20,
          },
          category: 'ai-ml',
        },
        style: {
          backgroundColor: 0xf97316,
          borderColor: 0xea580c,
          borderWidth: 2,
          borderRadius: 12,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'data-validation',
        position: { x: 700, y: 150 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Train Regressor',
          description: 'Train regression model',
          icon: '📈',
          properties: {
            rules: [
              { field: 'accuracy', rule: 'min', value: 0.85, message: 'Model accuracy too low' },
              { field: 'loss', rule: 'max', value: 0.1, message: 'Model loss too high' },
            ],
            strict: true,
          },
          category: 'ai-ml',
        },
        style: {
          backgroundColor: 0x8b5cf6,
          borderColor: 0x7c3aed,
          borderWidth: 2,
          borderRadius: 12,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'decision',
        position: { x: 900, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Model Selection',
          description: 'Select best performing model',
          icon: '🔀',
          properties: {
            conditions: [
              {
                expression: 'models.classifier.accuracy > models.vision.accuracy && models.classifier.accuracy > models.regressor.accuracy',
                label: 'Classifier Best'
              }
            ],
            defaultPath: 'vision-best',
          },
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0xf59e0b,
          borderColor: 0xd97706,
          borderWidth: 2,
          borderRadius: 4,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'action',
        position: { x: 1100, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Deploy Model',
          description: 'Deploy selected model to production',
          icon: '🚀',
          properties: {
            actionType: 'deployment',
            environment: 'production',
            modelVersion: '{{selectedModel.version}}',
          },
          category: 'business-logic',
        },
        style: {
          backgroundColor: 0x3b82f6,
          borderColor: 0x2563eb,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'notification',
        position: { x: 1300, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Training Complete',
          description: 'Send deployment notification',
          icon: '🔔',
          properties: {
            title: 'ML Pipeline Complete',
            message: 'Model {{selectedModel.name}} deployed successfully',
            type: 'success',
            channels: ['email', 'slack'],
          },
          category: 'communication',
        },
        style: {
          backgroundColor: 0x10b981,
          borderColor: 0x059669,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
    ],
    connections: [
      {
        sourceId: 'ml-start',
        targetId: 'data-preprocessing',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'data-preprocessing',
        targetId: 'parallel-training',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'parallel-training',
        targetId: 'train-classifier',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'parallel-training',
        targetId: 'train-vision',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'parallel-training',
        targetId: 'train-regressor',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'train-classifier',
        targetId: 'model-selection',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'train-vision',
        targetId: 'model-selection',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'train-regressor',
        targetId: 'model-selection',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'model-selection',
        targetId: 'deploy-model',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: 'Selected',
        style: {
          color: 0x10b981,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'deploy-model',
        targetId: 'training-complete',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
    ],
    viewport: { x: 0, y: 0, zoom: 1 },
    createdAt: new Date('2024-01-15'),
    updatedAt: new Date('2024-01-15'),
    author: 'System',
    version: '1.0.0',
  },

  // DevOps/CI-CD Templates
  {
    id: 'ci-cd-pipeline',
    name: 'CI/CD Pipeline with Testing',
    description: 'Complete CI/CD pipeline with automated testing, security scanning, and deployment',
    category: 'automation',
    icon: '🔄',
    tags: ['ci-cd', 'testing', 'deployment', 'security', 'automation'],
    nodes: [
      {
        type: 'webhook',
        position: { x: 100, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Code Push',
          description: 'Git push webhook trigger',
          icon: '📥',
          properties: {
            endpoint: '/webhooks/git-push',
            secret: '{{webhook_secret}}',
          },
          category: 'integration',
        },
        style: {
          backgroundColor: 0x3b82f6,
          borderColor: 0x2563eb,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'action',
        position: { x: 300, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Code Analysis',
          description: 'Run static code analysis',
          icon: '🔍',
          properties: {
            actionType: 'script',
            command: 'npm run lint && npm run type-check',
            timeout: 300000,
          },
          category: 'business-logic',
        },
        style: {
          backgroundColor: 0x64748b,
          borderColor: 0x475569,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'parallel',
        position: { x: 500, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Parallel Tests',
          description: 'Run unit and integration tests',
          icon: '⚡',
          properties: {
            branches: 3,
            waitForAll: true,
          },
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0x84cc16,
          borderColor: 0x65a30d,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'action',
        position: { x: 700, y: 50 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Unit Tests',
          description: 'Run unit test suite',
          icon: '🧪',
          properties: {
            actionType: 'script',
            command: 'npm run test:unit -- --coverage',
            timeout: 600000,
          },
          category: 'business-logic',
        },
        style: {
          backgroundColor: 0x10b981,
          borderColor: 0x059669,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'action',
        position: { x: 700, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Integration Tests',
          description: 'Run integration test suite',
          icon: '🔗',
          properties: {
            actionType: 'script',
            command: 'npm run test:integration',
            timeout: 900000,
          },
          category: 'business-logic',
        },
        style: {
          backgroundColor: 0x3b82f6,
          borderColor: 0x2563eb,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'action',
        position: { x: 700, y: 150 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Security Scan',
          description: 'Run security vulnerability scan',
          icon: '🔒',
          properties: {
            actionType: 'script',
            command: 'npm audit && npm run security-scan',
            timeout: 300000,
          },
          category: 'business-logic',
        },
        style: {
          backgroundColor: 0xef4444,
          borderColor: 0xdc2626,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'decision',
        position: { x: 900, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Quality Gate',
          description: 'Check if all tests passed',
          icon: '🔀',
          properties: {
            conditions: [
              {
                expression: 'testResults.unit.passed && testResults.integration.passed && securityScan.clean',
                label: 'All Passed'
              }
            ],
            defaultPath: 'failed',
          },
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0xf59e0b,
          borderColor: 0xd97706,
          borderWidth: 2,
          borderRadius: 4,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'action',
        position: { x: 1100, y: 50 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Build & Deploy',
          description: 'Build and deploy to staging',
          icon: '🚀',
          properties: {
            actionType: 'deployment',
            environment: 'staging',
            buildCommand: 'npm run build',
            deployCommand: 'npm run deploy:staging',
          },
          category: 'business-logic',
        },
        style: {
          backgroundColor: 0x8b5cf6,
          borderColor: 0x7c3aed,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'action',
        position: { x: 1100, y: 150 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Send Failure Alert',
          description: 'Notify team of pipeline failure',
          icon: '⚠️',
          properties: {
            actionType: 'notification',
            message: 'CI/CD Pipeline failed: {{failureReason}}',
            channels: ['slack', 'email'],
          },
          category: 'communication',
        },
        style: {
          backgroundColor: 0xef4444,
          borderColor: 0xdc2626,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'notification',
        position: { x: 1300, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Pipeline Success',
          description: 'Notify successful deployment',
          icon: '✅',
          properties: {
            title: 'Deployment Complete',
            message: 'Application deployed to staging successfully',
            type: 'success',
            channels: ['slack', 'email'],
          },
          category: 'communication',
        },
        style: {
          backgroundColor: 0x10b981,
          borderColor: 0x059669,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
    ],
    connections: [
      {
        sourceId: 'code-push',
        targetId: 'code-analysis',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'code-analysis',
        targetId: 'parallel-tests',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'parallel-tests',
        targetId: 'unit-tests',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'parallel-tests',
        targetId: 'integration-tests',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'parallel-tests',
        targetId: 'security-scan',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'unit-tests',
        targetId: 'quality-gate',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'integration-tests',
        targetId: 'quality-gate',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'security-scan',
        targetId: 'quality-gate',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'quality-gate',
        targetId: 'build-deploy',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: 'Passed',
        style: {
          color: 0x10b981,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'quality-gate',
        targetId: 'failure-alert',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: 'Failed',
        style: {
          color: 0xef4444,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'build-deploy',
        targetId: 'pipeline-success',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
    ],
    viewport: { x: 0, y: 0, zoom: 1 },
    createdAt: new Date('2024-01-15'),
    updatedAt: new Date('2024-01-15'),
    author: 'System',
    version: '1.0.0',
  },

  // IoT and Real-time Processing
  {
    id: 'iot-sensor-network',
    name: 'IoT Sensor Data Processing',
    description: 'Real-time IoT sensor data collection, processing, and alerting system',
    category: 'integration',
    icon: '📡',
    tags: ['iot', 'sensors', 'real-time', 'monitoring', 'alerting'],
    nodes: [
      {
        type: 'webhook',
        position: { x: 100, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Sensor Data',
          description: 'Receive sensor data via MQTT/WebSocket',
          icon: '📥',
          properties: {
            endpoint: '/api/sensor-data',
            method: 'POST',
            authRequired: true,
          },
          category: 'integration',
        },
        style: {
          backgroundColor: 0x3b82f6,
          borderColor: 0x2563eb,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'data-validation',
        position: { x: 300, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Validate Data',
          description: 'Validate sensor readings',
          icon: '✅',
          properties: {
            rules: [
              { field: 'temperature', rule: 'range', min: -50, max: 100, message: 'Invalid temperature' },
              { field: 'humidity', rule: 'range', min: 0, max: 100, message: 'Invalid humidity' },
              { field: 'deviceId', rule: 'required', message: 'Device ID required' },
            ],
            strict: false,
          },
          category: 'data-processing',
        },
        style: {
          backgroundColor: 0xec4899,
          borderColor: 0xdb2777,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'data-transform',
        position: { x: 500, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Normalize Data',
          description: 'Normalize and enrich sensor data',
          icon: '🔄',
          properties: {
            transformation: `
              return {
                ...data,
                normalizedTemp: (data.temperature - 0) / 100,
                normalizedHumidity: data.humidity / 100,
                timestamp: new Date().toISOString(),
                location: getDeviceLocation(data.deviceId),
                alertLevel: calculateAlertLevel(data)
              };
            `,
            inputFormat: 'json',
            outputFormat: 'json',
          },
          category: 'data-processing',
        },
        style: {
          backgroundColor: 0xf59e0b,
          borderColor: 0xd97706,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'database',
        position: { x: 700, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Store Data',
          description: 'Store processed sensor data',
          icon: '🗄️',
          properties: {
            operation: 'insert',
            table: 'sensor_readings',
            query: 'INSERT INTO sensor_readings VALUES :data',
          },
          category: 'database-storage',
        },
        style: {
          backgroundColor: 0x64748b,
          borderColor: 0x475569,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'decision',
        position: { x: 900, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Check Thresholds',
          description: 'Check if readings exceed thresholds',
          icon: '🔀',
          properties: {
            conditions: [
              {
                expression: 'data.alertLevel === "critical" || data.alertLevel === "warning"',
                label: 'Alert Required'
              }
            ],
            defaultPath: 'normal',
          },
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0xf59e0b,
          borderColor: 0xd97706,
          borderWidth: 2,
          borderRadius: 4,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'notification',
        position: { x: 1100, y: 50 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Send Alert',
          description: 'Send alert notification',
          icon: '🚨',
          properties: {
            title: 'Sensor Alert',
            message: 'Device {{deviceId}} reported {{alertLevel}} condition',
            type: 'warning',
            channels: ['sms', 'push'],
            priority: 'high',
          },
          category: 'communication',
        },
        style: {
          backgroundColor: 0xef4444,
          borderColor: 0xdc2626,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'action',
        position: { x: 1100, y: 150 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Update Dashboard',
          description: 'Update real-time dashboard',
          icon: '📊',
          properties: {
            actionType: 'websocket',
            channel: 'sensor-dashboard',
            data: '{{processedData}}',
          },
          category: 'business-logic',
        },
        style: {
          backgroundColor: 0x10b981,
          borderColor: 0x059669,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'timer',
        position: { x: 1300, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Aggregate Data',
          description: 'Aggregate data every 5 minutes',
          icon: '🕐',
          properties: {
            schedule: '*/5 * * * *',
            timezone: 'UTC',
          },
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0x64748b,
          borderColor: 0x475569,
          borderWidth: 2,
          borderRadius: 12,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
    ],
    connections: [
      {
        sourceId: 'sensor-data',
        targetId: 'validate-data',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'validate-data',
        targetId: 'normalize-data',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'normalize-data',
        targetId: 'store-data',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'store-data',
        targetId: 'check-thresholds',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'check-thresholds',
        targetId: 'send-alert',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: 'Alert',
        style: {
          color: 0xef4444,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'check-thresholds',
        targetId: 'update-dashboard',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: 'Normal',
        style: {
          color: 0x10b981,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'send-alert',
        targetId: 'aggregate-timer',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'update-dashboard',
        targetId: 'aggregate-timer',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
    ],
    viewport: { x: 0, y: 0, zoom: 1 },
    createdAt: new Date('2024-01-15'),
    updatedAt: new Date('2024-01-15'),
    author: 'System',
    version: '1.0.0',
  },

  // Advanced Analytics and Reporting
  {
    id: 'advanced-analytics-dashboard',
    name: 'Advanced Analytics Dashboard',
    description: 'Real-time analytics pipeline with KPI calculations, trend analysis, and automated reporting',
    category: 'data-pipeline',
    icon: '📊',
    tags: ['analytics', 'dashboard', 'kpi', 'reporting', 'real-time'],
    nodes: [
      {
        type: 'start',
        position: { x: 100, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Data Collection',
          description: 'Start analytics data collection',
          icon: '▶️',
          properties: {},
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0x10b981,
          borderColor: 0x059669,
          borderWidth: 2,
          borderRadius: 20,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'bold',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'database',
        position: { x: 300, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Fetch Raw Data',
          description: 'Retrieve raw analytics data',
          icon: '🗄️',
          properties: {
            operation: 'select',
            table: 'analytics_events',
            query: 'SELECT * FROM analytics_events WHERE timestamp >= :startDate',
          },
          category: 'database-storage',
        },
        style: {
          backgroundColor: 0x64748b,
          borderColor: 0x475569,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'parallel',
        position: { x: 500, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Parallel Processing',
          description: 'Process different analytics in parallel',
          icon: '⚡',
          properties: {
            branches: 4,
            waitForAll: true,
          },
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0x84cc16,
          borderColor: 0x65a30d,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'data-transform',
        position: { x: 700, y: 25 },
        size: { width: 120, height: 60 },
        data: {
          label: 'User Analytics',
          description: 'Calculate user engagement metrics',
          icon: '👥',
          properties: {
            transformation: `
              return {
                totalUsers: data.length,
                activeUsers: data.filter(d => d.lastActivity > Date.now() - 86400000).length,
                newUsers: data.filter(d => d.createdAt > Date.now() - 86400000).length,
                retentionRate: calculateRetention(data),
                userSegments: segmentUsers(data)
              };
            `,
            inputFormat: 'json',
            outputFormat: 'json',
          },
          category: 'data-processing',
        },
        style: {
          backgroundColor: 0x3b82f6,
          borderColor: 0x2563eb,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'data-transform',
        position: { x: 700, y: 75 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Revenue Analytics',
          description: 'Calculate revenue and conversion metrics',
          icon: '💰',
          properties: {
            transformation: `
              return {
                totalRevenue: data.reduce((sum, d) => sum + d.revenue, 0),
                averageOrderValue: data.reduce((sum, d) => sum + d.revenue, 0) / data.length,
                conversionRate: (data.filter(d => d.converted).length / data.length) * 100,
                revenueBySource: groupByRevenueSource(data),
                growthRate: calculateGrowthRate(data)
              };
            `,
            inputFormat: 'json',
            outputFormat: 'json',
          },
          category: 'data-processing',
        },
        style: {
          backgroundColor: 0x10b981,
          borderColor: 0x059669,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'data-transform',
        position: { x: 700, y: 125 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Performance Analytics',
          description: 'Calculate performance and speed metrics',
          icon: '⚡',
          properties: {
            transformation: `
              return {
                averageLoadTime: data.reduce((sum, d) => sum + d.loadTime, 0) / data.length,
                errorRate: (data.filter(d => d.hasError).length / data.length) * 100,
                throughput: data.length / ((Date.now() - data[0].timestamp) / 1000),
                performanceScore: calculatePerformanceScore(data),
                bottlenecks: identifyBottlenecks(data)
              };
            `,
            inputFormat: 'json',
            outputFormat: 'json',
          },
          category: 'data-processing',
        },
        style: {
          backgroundColor: 0xf59e0b,
          borderColor: 0xd97706,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'data-transform',
        position: { x: 700, y: 175 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Trend Analysis',
          description: 'Analyze trends and patterns',
          icon: '📈',
          properties: {
            transformation: `
              return {
                trends: analyzeTrends(data),
                predictions: generatePredictions(data),
                anomalies: detectAnomalies(data),
                seasonality: detectSeasonality(data),
                correlations: findCorrelations(data)
              };
            `,
            inputFormat: 'json',
            outputFormat: 'json',
          },
          category: 'data-processing',
        },
        style: {
          backgroundColor: 0x8b5cf6,
          borderColor: 0x7c3aed,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'data-transform',
        position: { x: 900, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Generate Report',
          description: 'Compile analytics into report',
          icon: '📋',
          properties: {
            transformation: `
              return {
                summary: generateExecutiveSummary(analytics),
                kpis: extractKPIs(analytics),
                charts: generateCharts(analytics),
                insights: generateInsights(analytics),
                recommendations: generateRecommendations(analytics)
              };
            `,
            inputFormat: 'json',
            outputFormat: 'json',
          },
          category: 'data-processing',
        },
        style: {
          backgroundColor: 0xec4899,
          borderColor: 0xdb2777,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'email',
        position: { x: 1100, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Send Report',
          description: 'Email analytics report to stakeholders',
          icon: '📧',
          properties: {
            to: '{{stakeholders}}',
            subject: 'Daily Analytics Report - {{date}}',
            body: '{{report.summary}}',
            attachments: ['analytics-report.pdf', 'charts.zip'],
          },
          category: 'communication',
        },
        style: {
          backgroundColor: 0x3b82f6,
          borderColor: 0x2563eb,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'action',
        position: { x: 1300, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Update Dashboard',
          description: 'Update real-time dashboard with latest data',
          icon: '📊',
          properties: {
            actionType: 'api',
            endpoint: '/api/dashboard/update',
            method: 'POST',
            data: '{{analyticsData}}',
          },
          category: 'business-logic',
        },
        style: {
          backgroundColor: 0x10b981,
          borderColor: 0x059669,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
    ],
    connections: [
      {
        sourceId: 'data-collection',
        targetId: 'fetch-raw-data',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'fetch-raw-data',
        targetId: 'parallel-processing',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'parallel-processing',
        targetId: 'user-analytics',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'parallel-processing',
        targetId: 'revenue-analytics',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'parallel-processing',
        targetId: 'performance-analytics',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'parallel-processing',
        targetId: 'trend-analysis',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'user-analytics',
        targetId: 'generate-report',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'revenue-analytics',
        targetId: 'generate-report',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'performance-analytics',
        targetId: 'generate-report',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'trend-analysis',
        targetId: 'generate-report',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'generate-report',
        targetId: 'send-report',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'send-report',
        targetId: 'update-dashboard',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
    ],
    viewport: { x: 0, y: 0, zoom: 1 },
    createdAt: new Date('2024-01-15'),
    updatedAt: new Date('2024-01-15'),
    author: 'System',
    version: '1.0.0',
  },

  // Multi-tenant SaaS Workflow
  {
    id: 'multi-tenant-saas-workflow',
    name: 'Multi-Tenant SaaS Onboarding',
    description: 'Automated tenant provisioning, configuration, and onboarding workflow for SaaS applications',
    category: 'business-process',
    icon: '🏢',
    tags: ['saas', 'multi-tenant', 'onboarding', 'provisioning', 'automation'],
    nodes: [
      {
        type: 'webhook',
        position: { x: 100, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'New Tenant Signup',
          description: 'Receive new tenant registration',
          icon: '📥',
          properties: {
            endpoint: '/webhooks/tenant-signup',
            method: 'POST',
            validation: 'schema',
          },
          category: 'integration',
        },
        style: {
          backgroundColor: 0x3b82f6,
          borderColor: 0x2563eb,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'data-validation',
        position: { x: 300, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Validate Signup',
          description: 'Validate tenant information',
          icon: '✅',
          properties: {
            rules: [
              { field: 'companyName', rule: 'required', message: 'Company name required' },
              { field: 'adminEmail', rule: 'email', message: 'Valid admin email required' },
              { field: 'plan', rule: 'enum', values: ['starter', 'professional', 'enterprise'], message: 'Valid plan required' },
            ],
            strict: true,
          },
          category: 'data-processing',
        },
        style: {
          backgroundColor: 0xec4899,
          borderColor: 0xdb2777,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'database',
        position: { x: 500, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Create Tenant Record',
          description: 'Create tenant database record',
          icon: '🗄️',
          properties: {
            operation: 'insert',
            table: 'tenants',
            query: 'INSERT INTO tenants (id, name, plan, status, created_at) VALUES (:id, :name, :plan, :status, :created_at)',
          },
          category: 'database-storage',
        },
        style: {
          backgroundColor: 0x64748b,
          borderColor: 0x475569,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'parallel',
        position: { x: 700, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Parallel Setup',
          description: 'Setup tenant resources in parallel',
          icon: '⚡',
          properties: {
            branches: 4,
            waitForAll: true,
          },
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0x84cc16,
          borderColor: 0x65a30d,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'action',
        position: { x: 900, y: 25 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Provision Database',
          description: 'Create tenant-specific database',
          icon: '🗃️',
          properties: {
            actionType: 'script',
            command: 'create-tenant-db --tenant-id {{tenant.id}} --plan {{tenant.plan}}',
            timeout: 300000,
          },
          category: 'business-logic',
        },
        style: {
          backgroundColor: 0x64748b,
          borderColor: 0x475569,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'action',
        position: { x: 900, y: 75 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Setup Storage',
          description: 'Configure cloud storage for tenant',
          icon: '☁️',
          properties: {
            actionType: 'api',
            endpoint: '/api/storage/provision',
            method: 'POST',
            data: '{ "tenantId": "{{tenant.id}}", "plan": "{{tenant.plan}}" }',
          },
          category: 'business-logic',
        },
        style: {
          backgroundColor: 0xf59e0b,
          borderColor: 0xd97706,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'action',
        position: { x: 900, y: 125 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Configure Domain',
          description: 'Setup custom domain for tenant',
          icon: '🌐',
          properties: {
            actionType: 'script',
            command: 'configure-domain --tenant {{tenant.id}} --domain {{tenant.domain}}',
            timeout: 120000,
          },
          category: 'business-logic',
        },
        style: {
          backgroundColor: 0x8b5cf6,
          borderColor: 0x7c3aed,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'action',
        position: { x: 900, y: 175 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Send Welcome Email',
          description: 'Send tenant welcome and setup instructions',
          icon: '📧',
          properties: {
            actionType: 'email',
            template: 'tenant-welcome',
            to: '{{tenant.adminEmail}}',
            data: '{{tenant}}',
          },
          category: 'communication',
        },
        style: {
          backgroundColor: 0x3b82f6,
          borderColor: 0x2563eb,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'decision',
        position: { x: 1100, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Check Setup Status',
          description: 'Verify all tenant resources are ready',
          icon: '🔀',
          properties: {
            conditions: [
              {
                expression: 'setupResults.database && setupResults.storage && setupResults.domain',
                label: 'Setup Complete'
              }
            ],
            defaultPath: 'retry',
          },
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0xf59e0b,
          borderColor: 0xd97706,
          borderWidth: 2,
          borderRadius: 4,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'database',
        position: { x: 1300, y: 50 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Update Status',
          description: 'Mark tenant as active',
          icon: '🗄️',
          properties: {
            operation: 'update',
            table: 'tenants',
            query: 'UPDATE tenants SET status = "active", activated_at = NOW() WHERE id = :id',
          },
          category: 'database-storage',
        },
        style: {
          backgroundColor: 0x10b981,
          borderColor: 0x059669,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'notification',
        position: { x: 1300, y: 150 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Setup Failed',
          description: 'Notify admin of setup failure',
          icon: '⚠️',
          properties: {
            title: 'Tenant Setup Failed',
            message: 'Failed to provision tenant {{tenant.name}} - {{failureReason}}',
            type: 'error',
            channels: ['email', 'slack'],
            priority: 'high',
          },
          category: 'communication',
        },
        style: {
          backgroundColor: 0xef4444,
          borderColor: 0xdc2626,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'notification',
        position: { x: 1500, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Tenant Ready',
          description: 'Notify tenant that setup is complete',
          icon: '🎉',
          properties: {
            title: 'Welcome to Our Platform!',
            message: 'Your account is ready. Login at {{tenant.domain}}',
            type: 'success',
            channels: ['email'],
          },
          category: 'communication',
        },
        style: {
          backgroundColor: 0x10b981,
          borderColor: 0x059669,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
    ],
    connections: [
      {
        sourceId: 'tenant-signup',
        targetId: 'validate-signup',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'validate-signup',
        targetId: 'create-tenant-record',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'create-tenant-record',
        targetId: 'parallel-setup',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'parallel-setup',
        targetId: 'provision-database',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'parallel-setup',
        targetId: 'setup-storage',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'parallel-setup',
        targetId: 'configure-domain',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'parallel-setup',
        targetId: 'send-welcome-email',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'provision-database',
        targetId: 'check-setup-status',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'setup-storage',
        targetId: 'check-setup-status',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'configure-domain',
        targetId: 'check-setup-status',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'send-welcome-email',
        targetId: 'check-setup-status',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'check-setup-status',
        targetId: 'update-status',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: 'Success',
        style: {
          color: 0x10b981,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'check-setup-status',
        targetId: 'setup-failed',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: 'Failed',
        style: {
          color: 0xef4444,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'update-status',
        targetId: 'tenant-ready',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
    ],
    viewport: { x: 0, y: 0, zoom: 1 },
    createdAt: new Date('2024-01-15'),
    updatedAt: new Date('2024-01-15'),
    author: 'System',
    version: '1.0.0',
  },

  // Advanced Security and Compliance
  {
    id: 'advanced-security-workflow',
    name: 'Advanced Security & Compliance',
    description: 'Comprehensive security monitoring, threat detection, and compliance automation workflow',
    category: 'automation',
    icon: '🔒',
    tags: ['security', 'compliance', 'threat-detection', 'monitoring', 'gdpr', 'audit'],
    nodes: [
      {
        type: 'start',
        position: { x: 100, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Security Event',
          description: 'Security event or log entry detected',
          icon: '▶️',
          properties: {},
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0x10b981,
          borderColor: 0x059669,
          borderWidth: 2,
          borderRadius: 20,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'bold',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'data-validation',
        position: { x: 300, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Initial Analysis',
          description: 'Analyze security event for basic patterns',
          icon: '🔍',
          properties: {
            rules: [
              { field: 'severity', rule: 'enum', values: ['low', 'medium', 'high', 'critical'], message: 'Invalid severity level' },
              { field: 'source', rule: 'required', message: 'Event source required' },
              { field: 'timestamp', rule: 'required', message: 'Timestamp required' },
            ],
            strict: false,
          },
          category: 'data-processing',
        },
        style: {
          backgroundColor: 0xec4899,
          borderColor: 0xdb2777,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'parallel',
        position: { x: 500, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Parallel Analysis',
          description: 'Analyze event with multiple security engines',
          icon: '⚡',
          properties: {
            branches: 4,
            waitForAll: false,
          },
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0x84cc16,
          borderColor: 0x65a30d,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'sentiment-analysis',
        position: { x: 700, y: 25 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Threat Intelligence',
          description: 'Check against threat intelligence feeds',
          icon: '🕵️',
          properties: {
            model: 'threat-intelligence-model',
            feeds: ['malware-signatures', 'ip-blacklists', 'domain-reputation'],
            confidence: 0.8,
          },
          category: 'ai-ml',
        },
        style: {
          backgroundColor: 0xef4444,
          borderColor: 0xdc2626,
          borderWidth: 2,
          borderRadius: 12,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'data-transform',
        position: { x: 700, y: 75 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Behavioral Analysis',
          description: 'Analyze user behavior patterns',
          icon: '👤',
          properties: {
            transformation: `
              return {
                anomalyScore: detectAnomalies(event),
                riskProfile: assessRiskProfile(event),
                behaviorPattern: analyzeBehavior(event),
                complianceFlags: checkCompliance(event)
              };
            `,
            inputFormat: 'json',
            outputFormat: 'json',
          },
          category: 'data-processing',
        },
        style: {
          backgroundColor: 0xf97316,
          borderColor: 0xea580c,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'action',
        position: { x: 700, y: 125 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Compliance Check',
          description: 'Check against compliance frameworks',
          icon: '📋',
          properties: {
            actionType: 'script',
            command: 'check-compliance --event {{event}} --frameworks GDPR,SOX,HIPAA',
            timeout: 30000,
          },
          category: 'business-logic',
        },
        style: {
          backgroundColor: 0x8b5cf6,
          borderColor: 0x7c3aed,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'database',
        position: { x: 700, y: 175 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Log Security Event',
          description: 'Store security event in audit log',
          icon: '📝',
          properties: {
            operation: 'insert',
            table: 'security_events',
            query: 'INSERT INTO security_events VALUES :event',
          },
          category: 'database-storage',
        },
        style: {
          backgroundColor: 0x64748b,
          borderColor: 0x475569,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'decision',
        position: { x: 900, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Risk Assessment',
          description: 'Determine if event requires action',
          icon: '⚖️',
          properties: {
            conditions: [
              {
                expression: 'threatScore > 0.8 || anomalyScore > 0.9 || severity === "critical"',
                label: 'High Risk'
              }
            ],
            defaultPath: 'monitor',
          },
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0xf59e0b,
          borderColor: 0xd97706,
          borderWidth: 2,
          borderRadius: 4,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'action',
        position: { x: 1100, y: 50 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Incident Response',
          description: 'Execute automated incident response',
          icon: '🚨',
          properties: {
            actionType: 'script',
            command: 'incident-response --event {{event}} --severity {{severity}}',
            timeout: 60000,
          },
          category: 'business-logic',
        },
        style: {
          backgroundColor: 0xef4444,
          borderColor: 0xdc2626,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'notification',
        position: { x: 1100, y: 150 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Security Alert',
          description: 'Send security alert to response team',
          icon: '🚨',
          properties: {
            title: 'Security Incident Detected',
            message: 'High-risk security event: {{event.description}}',
            type: 'error',
            channels: ['email', 'sms', 'slack'],
            priority: 'urgent',
          },
          category: 'communication',
        },
        style: {
          backgroundColor: 0xef4444,
          borderColor: 0xdc2626,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'action',
        position: { x: 1300, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Generate Report',
          description: 'Generate security incident report',
          icon: '📊',
          properties: {
            actionType: 'script',
            command: 'generate-security-report --event {{event}} --analysis {{analysis}}',
            timeout: 30000,
          },
          category: 'business-logic',
        },
        style: {
          backgroundColor: 0x3b82f6,
          borderColor: 0x2563eb,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'database',
        position: { x: 1500, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Update Metrics',
          description: 'Update security metrics dashboard',
          icon: '📈',
          properties: {
            operation: 'update',
            table: 'security_metrics',
            query: 'UPDATE security_metrics SET incidents = incidents + 1 WHERE date = CURRENT_DATE',
          },
          category: 'database-storage',
        },
        style: {
          backgroundColor: 0x10b981,
          borderColor: 0x059669,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
    ],
    connections: [
      {
        sourceId: 'security-event',
        targetId: 'initial-analysis',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'initial-analysis',
        targetId: 'parallel-analysis',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'parallel-analysis',
        targetId: 'threat-intelligence',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'parallel-analysis',
        targetId: 'behavioral-analysis',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'parallel-analysis',
        targetId: 'compliance-check',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'parallel-analysis',
        targetId: 'log-security-event',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'threat-intelligence',
        targetId: 'risk-assessment',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'behavioral-analysis',
        targetId: 'risk-assessment',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'compliance-check',
        targetId: 'risk-assessment',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'log-security-event',
        targetId: 'risk-assessment',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'risk-assessment',
        targetId: 'incident-response',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: 'High Risk',
        style: {
          color: 0xef4444,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'risk-assessment',
        targetId: 'security-alert',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: 'Monitor',
        style: {
          color: 0xf59e0b,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'incident-response',
        targetId: 'generate-report',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'security-alert',
        targetId: 'generate-report',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'generate-report',
        targetId: 'update-metrics',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
    ],
    viewport: { x: 0, y: 0, zoom: 1 },
    createdAt: new Date('2024-01-15'),
    updatedAt: new Date('2024-01-15'),
    author: 'System',
    version: '1.0.0',
  },

  // Advanced Communication Workflow
  {
    id: 'advanced-communication-workflow',
    name: 'Advanced Multi-Channel Communication',
    description: 'Intelligent multi-channel communication workflow with personalization, A/B testing, and automated follow-ups',
    category: 'communication',
    icon: '📢',
    tags: ['communication', 'multi-channel', 'personalization', 'ab-testing', 'automation'],
    nodes: [
      {
        type: 'start',
        position: { x: 100, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Communication Trigger',
          description: 'Communication event triggered',
          icon: '▶️',
          properties: {},
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0x10b981,
          borderColor: 0x059669,
          borderWidth: 2,
          borderRadius: 20,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'bold',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'database',
        position: { x: 300, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Fetch User Data',
          description: 'Retrieve user profile and preferences',
          icon: '👤',
          properties: {
            operation: 'select',
            table: 'user_profiles',
            query: 'SELECT * FROM user_profiles WHERE id = :userId',
          },
          category: 'database-storage',
        },
        style: {
          backgroundColor: 0x64748b,
          borderColor: 0x475569,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'data-transform',
        position: { x: 500, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Personalize Content',
          description: 'Personalize message content based on user data',
          icon: '🎨',
          properties: {
            transformation: `
              return {
                personalizedSubject: personalizeSubject(baseSubject, userData),
                personalizedBody: personalizeBody(baseBody, userData),
                recommendedChannel: determineBestChannel(userData),
                optimalTime: calculateOptimalSendTime(userData),
                abTestVariant: assignABTestVariant(userData)
              };
            `,
            inputFormat: 'json',
            outputFormat: 'json',
          },
          category: 'data-processing',
        },
        style: {
          backgroundColor: 0xec4899,
          borderColor: 0xdb2777,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'parallel',
        position: { x: 700, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Multi-Channel Send',
          description: 'Send through multiple channels simultaneously',
          icon: '⚡',
          properties: {
            branches: 4,
            waitForAll: false,
          },
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0x84cc16,
          borderColor: 0x65a30d,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'email',
        position: { x: 900, y: 25 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Send Email',
          description: 'Send personalized email',
          icon: '📧',
          properties: {
            to: '{{user.email}}',
            subject: '{{personalizedSubject}}',
            body: '{{personalizedBody}}',
            template: 'responsive-email',
            tracking: true,
          },
          category: 'communication',
        },
        style: {
          backgroundColor: 0x3b82f6,
          borderColor: 0x2563eb,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'notification',
        position: { x: 900, y: 75 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Send Push Notification',
          description: 'Send mobile push notification',
          icon: '📱',
          properties: {
            title: '{{personalizedSubject}}',
            message: '{{personalizedBody}}',
            type: 'info',
            channels: ['push'],
            priority: 'normal',
          },
          category: 'communication',
        },
        style: {
          backgroundColor: 0x8b5cf6,
          borderColor: 0x7c3aed,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'notification',
        position: { x: 900, y: 125 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Send SMS',
          description: 'Send SMS message',
          icon: '💬',
          properties: {
            title: '',
            message: '{{personalizedBody}}',
            type: 'info',
            channels: ['sms'],
            priority: 'normal',
          },
          category: 'communication',
        },
        style: {
          backgroundColor: 0x10b981,
          borderColor: 0x059669,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'action',
        position: { x: 900, y: 175 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Send In-App Message',
          description: 'Send in-app notification',
          icon: '💭',
          properties: {
            actionType: 'api',
            endpoint: '/api/notifications/in-app',
            method: 'POST',
            data: '{ "userId": "{{user.id}}", "message": "{{personalizedBody}}", "type": "info" }',
          },
          category: 'business-logic',
        },
        style: {
          backgroundColor: 0xf59e0b,
          borderColor: 0xd97706,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'wait',
        position: { x: 1100, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Wait for Engagement',
          description: 'Wait for user engagement or timeout',
          icon: '⏳',
          properties: {
            condition: 'userEngaged === true',
            timeout: 86400000, // 24 hours
          },
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0x64748b,
          borderColor: 0x475569,
          borderWidth: 2,
          borderRadius: 20,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'decision',
        position: { x: 1300, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Check Engagement',
          description: 'Determine if user engaged with message',
          icon: '🔀',
          properties: {
            conditions: [
              {
                expression: 'engagementType === "click" || engagementType === "conversion"',
                label: 'Positive Engagement'
              }
            ],
            defaultPath: 'follow-up',
          },
          category: 'flow-control',
        },
        style: {
          backgroundColor: 0xf59e0b,
          borderColor: 0xd97706,
          borderWidth: 2,
          borderRadius: 4,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'action',
        position: { x: 1500, y: 50 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Log Success',
          description: 'Log successful communication',
          icon: '✅',
          properties: {
            actionType: 'database',
            table: 'communication_logs',
            operation: 'insert',
            data: '{{communicationResult}}',
          },
          category: 'business-logic',
        },
        style: {
          backgroundColor: 0x10b981,
          borderColor: 0x059669,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'notification',
        position: { x: 1500, y: 150 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Send Follow-up',
          description: 'Send follow-up communication',
          icon: '🔄',
          properties: {
            title: 'Following up...',
            message: 'We noticed you haven\'t engaged yet. Here\'s more information...',
            type: 'reminder',
            channels: ['{{bestChannel}}'],
            priority: 'normal',
          },
          category: 'communication',
        },
        style: {
          backgroundColor: 0xf97316,
          borderColor: 0xea580c,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'database',
        position: { x: 1700, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Update Analytics',
          description: 'Update communication analytics',
          icon: '📊',
          properties: {
            operation: 'update',
            table: 'communication_analytics',
            query: 'UPDATE communication_analytics SET sent = sent + 1, engaged = engaged + :engaged WHERE campaign_id = :campaignId',
          },
          category: 'database-storage',
        },
        style: {
          backgroundColor: 0x3b82f6,
          borderColor: 0x2563eb,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
    ],
    connections: [
      {
        sourceId: 'communication-trigger',
        targetId: 'fetch-user-data',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'fetch-user-data',
        targetId: 'personalize-content',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'personalize-content',
        targetId: 'multi-channel-send',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'multi-channel-send',
        targetId: 'send-email',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'multi-channel-send',
        targetId: 'send-push',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'multi-channel-send',
        targetId: 'send-sms',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'multi-channel-send',
        targetId: 'send-in-app',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'send-email',
        targetId: 'wait-engagement',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'send-push',
        targetId: 'wait-engagement',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'send-sms',
        targetId: 'wait-engagement',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'send-in-app',
        targetId: 'wait-engagement',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'wait-engagement',
        targetId: 'check-engagement',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'check-engagement',
        targetId: 'log-success',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: 'Engaged',
        style: {
          color: 0x10b981,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'check-engagement',
        targetId: 'send-follow-up',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: 'No Engagement',
        style: {
          color: 0xf97316,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'log-success',
        targetId: 'update-analytics',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'send-follow-up',
        targetId: 'update-analytics',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: '',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
    ],
    viewport: { x: 0, y: 0, zoom: 1 },
    createdAt: new Date('2024-01-15'),
    updatedAt: new Date('2024-01-15'),
    author: 'System',
    version: '1.0.0',
  },
  // AI Model Training Pipeline
  {
    id: 'ai-model-training-pipeline',
    name: 'AI Model Training Pipeline',
    description: 'Complete ML pipeline for training, validating, and deploying AI models with automated hyperparameter tuning and model versioning.',
    category: 'advanced-ai',
    icon: '🤖',
    tags: ['machine-learning', 'training', 'deployment', 'hyperparameter-tuning', 'model-versioning'],
    nodes: [
      {
        type: 'data-transform',
        position: { x: 100, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Data Ingestion',
          category: 'data-processing',
          properties: {
            sourceType: 'database',
            tableName: 'training_data',
            batchSize: 1000,
            preprocessing: true,
          },
        },
        style: {
          backgroundColor: 0x3b82f6,
          borderColor: 0x2563eb,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'data-transform',
        position: { x: 300, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Data Preprocessing',
          category: 'data-processing',
          properties: {
            normalization: 'standard',
            encoding: 'one-hot',
            missingValues: 'impute',
            featureSelection: true,
          },
        },
        style: {
          backgroundColor: 0x3b82f6,
          borderColor: 0x2563eb,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'api-call',
        position: { x: 500, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Model Training',
          category: 'ai-ml',
          properties: {
            modelType: 'xgboost',
            trainingParams: {
              maxDepth: 6,
              learningRate: 0.1,
              nEstimators: 100,
            },
          },
        },
        style: {
          backgroundColor: 0x8b5cf6,
          borderColor: 0x7c3aed,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
      {
        type: 'api-call',
        position: { x: 700, y: 100 },
        size: { width: 120, height: 60 },
        data: {
          label: 'Model Deployment',
          category: 'deployment',
          properties: {
            deploymentType: 'kubernetes',
            serviceName: 'ml-service',
            replicas: 3,
          },
        },
        style: {
          backgroundColor: 0x10b981,
          borderColor: 0x059669,
          borderWidth: 2,
          borderRadius: 8,
          textColor: 0xffffff,
          fontSize: 14,
          fontWeight: 'normal',
          shadow: true,
          opacity: 1,
        },
      },
    ],
    connections: [
      {
        sourceId: 'data-ingestion',
        targetId: 'data-preprocessing',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: 'Raw Data',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'data-preprocessing',
        targetId: 'model-training',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: 'Processed Data',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
      {
        sourceId: 'model-training',
        targetId: 'model-deployment',
        sourceHandle: 'output',
        targetHandle: 'input',
        label: 'Trained Model',
        style: {
          color: 0x3b82f6,
          width: 2,
          opacity: 1,
          animated: false,
          dashed: false,
          arrowSize: 6,
        },
      },
    ],
    viewport: { x: 0, y: 0, zoom: 0.8 },
    createdAt: new Date('2024-01-16'),
    updatedAt: new Date('2024-01-16'),
    author: 'AI Team',
    version: '1.0.0',
  },
];

// Advanced AI Templates
export const AI_MODEL_TRAINING_PIPELINE: NodeTemplate = {
  id: 'ai-model-training-pipeline',
  name: 'AI Model Training Pipeline',
  description: 'Complete ML pipeline for training, validating, and deploying AI models with automated hyperparameter tuning and model versioning.',
  category: 'advanced-ai',
  tags: ['machine-learning', 'training', 'deployment', 'hyperparameter-tuning', 'model-versioning'],
  nodes: [
    {
      id: 'data-ingestion',
      type: 'data-transform',
      position: { x: 100, y: 100 },
      data: {
        label: 'Data Ingestion',
        properties: {
          sourceType: 'database',
          tableName: 'training_data',
          batchSize: 1000,
          preprocessing: true,
        },
      },
    },
    {
      id: 'data-preprocessing',
      type: 'data-transform',
      position: { x: 300, y: 100 },
      data: {
        label: 'Data Preprocessing',
        properties: {
          normalization: 'standard',
          encoding: 'one-hot',
          missingValues: 'impute',
          featureSelection: true,
        },
      },
    },
    {
      id: 'train-validation-split',
      type: 'data-transform',
      position: { x: 500, y: 100 },
      data: {
        label: 'Train/Validation Split',
        properties: {
          testSize: 0.2,
          randomState: 42,
          stratify: true,
        },
      },
    },
    {
      id: 'hyperparameter-tuning',
      type: 'parallel',
      position: { x: 700, y: 50 },
      data: {
        label: 'Hyperparameter Tuning',
        properties: {
          algorithm: 'grid-search',
          cvFolds: 5,
          scoring: 'accuracy',
        },
      },
    },
    {
      id: 'model-training',
      type: 'api-call',
      position: { x: 900, y: 100 },
      data: {
        label: 'Model Training',
        properties: {
          modelType: 'xgboost',
          trainingParams: {
            maxDepth: 6,
            learningRate: 0.1,
            nEstimators: 100,
          },
        },
      },
    },
    {
      id: 'model-validation',
      type: 'data-transform',
      position: { x: 1100, y: 100 },
      data: {
        label: 'Model Validation',
        properties: {
          metrics: ['accuracy', 'precision', 'recall', 'f1-score'],
          crossValidation: true,
          confusionMatrix: true,
        },
      },
    },
    {
      id: 'model-registry',
      type: 'api-call',
      position: { x: 1300, y: 100 },
      data: {
        label: 'Model Registry',
        properties: {
          registryType: 'mlflow',
          modelName: 'production-model',
          version: 'auto-increment',
        },
      },
    },
    {
      id: 'deployment-trigger',
      type: 'decision',
      position: { x: 1500, y: 100 },
      data: {
        label: 'Performance Check',
        properties: {
          condition: 'accuracy > 0.85',
          threshold: 0.85,
        },
      },
    },
    {
      id: 'model-deployment',
      type: 'api-call',
      position: { x: 1700, y: 50 },
      data: {
        label: 'Model Deployment',
        properties: {
          deploymentType: 'kubernetes',
          serviceName: 'ml-service',
          replicas: 3,
        },
      },
    },
    {
      id: 'rollback',
      type: 'api-call',
      position: { x: 1700, y: 150 },
      data: {
        label: 'Rollback',
        properties: {
          action: 'revert-to-previous',
          reason: 'performance-below-threshold',
        },
      },
    },
  ],
  edges: [
    {
      sourceId: 'data-ingestion',
      targetId: 'data-preprocessing',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Raw Data',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'data-preprocessing',
      targetId: 'train-validation-split',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Processed Data',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'train-validation-split',
      targetId: 'hyperparameter-tuning',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Split Data',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'hyperparameter-tuning',
      targetId: 'model-training',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Best Params',
      style: {
        color: 0x10b981,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'model-training',
      targetId: 'model-validation',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Trained Model',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'model-validation',
      targetId: 'model-registry',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Validation Results',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'model-registry',
      targetId: 'deployment-trigger',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Registered Model',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'deployment-trigger',
      targetId: 'model-deployment',
      sourceHandle: 'output-true',
      targetHandle: 'input',
      label: 'Deploy',
      style: {
        color: 0x10b981,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'deployment-trigger',
      targetId: 'rollback',
      sourceHandle: 'output-false',
      targetHandle: 'input',
      label: 'Rollback',
      style: {
        color: 0xf97316,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
  ],
  viewport: { x: 0, y: 0, zoom: 0.8 },
  createdAt: new Date('2024-01-16'),
  updatedAt: new Date('2024-01-16'),
  author: 'AI Team',
  version: '1.0.0',
};

export const DEVOPS_CI_CD_PIPELINE: NodeTemplate = {
  id: 'devops-ci-cd-pipeline',
  name: 'DevOps CI/CD Pipeline',
  description: 'Complete CI/CD pipeline with automated testing, security scanning, containerization, and deployment orchestration.',
  category: 'devops',
  tags: ['ci-cd', 'testing', 'security', 'containerization', 'deployment', 'monitoring'],
  nodes: [
    {
      id: 'code-commit',
      type: 'webhook',
      position: { x: 100, y: 100 },
      data: {
        label: 'Code Commit',
        properties: {
          trigger: 'push',
          branch: 'main',
          repository: 'my-app',
        },
      },
    },
    {
      id: 'linting',
      type: 'api-call',
      position: { x: 300, y: 50 },
      data: {
        label: 'Code Linting',
        properties: {
          tool: 'eslint',
          config: 'strict',
          failOnError: true,
        },
      },
    },
    {
      id: 'unit-tests',
      type: 'api-call',
      position: { x: 300, y: 150 },
      data: {
        label: 'Unit Tests',
        properties: {
          framework: 'jest',
          coverage: true,
          threshold: 80,
        },
      },
    },
    {
      id: 'integration-tests',
      type: 'api-call',
      position: { x: 500, y: 100 },
      data: {
        label: 'Integration Tests',
        properties: {
          environment: 'staging',
          database: 'test-db',
          timeout: 300,
        },
      },
    },
    {
      id: 'security-scan',
      type: 'api-call',
      position: { x: 700, y: 100 },
      data: {
        label: 'Security Scan',
        properties: {
          tools: ['snyk', 'sonarcloud'],
          severity: 'high',
          failOnVulnerabilities: true,
        },
      },
    },
    {
      id: 'build-container',
      type: 'api-call',
      position: { x: 900, y: 100 },
      data: {
        label: 'Build Container',
        properties: {
          dockerfile: 'Dockerfile',
          imageName: 'my-app',
          tag: 'latest',
        },
      },
    },
    {
      id: 'push-registry',
      type: 'api-call',
      position: { x: 1100, y: 100 },
      data: {
        label: 'Push to Registry',
        properties: {
          registry: 'dockerhub',
          repository: 'my-org/my-app',
          tagStrategy: 'git-hash',
        },
      },
    },
    {
      id: 'deploy-staging',
      type: 'api-call',
      position: { x: 1300, y: 50 },
      data: {
        label: 'Deploy to Staging',
        properties: {
          environment: 'staging',
          replicas: 2,
          healthCheck: '/health',
        },
      },
    },
    {
      id: 'smoke-tests',
      type: 'api-call',
      position: { x: 1300, y: 150 },
      data: {
        label: 'Smoke Tests',
        properties: {
          endpoint: 'https://staging.my-app.com',
          tests: ['login', 'dashboard', 'api-calls'],
        },
      },
    },
    {
      id: 'approval-gate',
      type: 'decision',
      position: { x: 1500, y: 100 },
      data: {
        label: 'Manual Approval',
        properties: {
          approvers: ['lead-dev', 'qa-manager'],
          timeout: 24,
        },
      },
    },
    {
      id: 'deploy-production',
      type: 'api-call',
      position: { x: 1700, y: 50 },
      data: {
        label: 'Deploy to Production',
        properties: {
          environment: 'production',
          replicas: 5,
          blueGreen: true,
        },
      },
    },
    {
      id: 'rollback',
      type: 'api-call',
      position: { x: 1700, y: 150 },
      data: {
        label: 'Rollback',
        properties: {
          action: 'blue-green-rollback',
          reason: 'deployment-failure',
        },
      },
    },
    {
      id: 'monitoring-setup',
      type: 'api-call',
      position: { x: 1900, y: 100 },
      data: {
        label: 'Setup Monitoring',
        properties: {
          tools: ['prometheus', 'grafana'],
          alerts: ['error-rate', 'response-time'],
        },
      },
    },
  ],
  edges: [
    {
      sourceId: 'code-commit',
      targetId: 'linting',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Code Changes',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'code-commit',
      targetId: 'unit-tests',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Code Changes',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'linting',
      targetId: 'integration-tests',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Lint Passed',
      style: {
        color: 0x10b981,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'unit-tests',
      targetId: 'integration-tests',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Tests Passed',
      style: {
        color: 0x10b981,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'integration-tests',
      targetId: 'security-scan',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Integration OK',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'security-scan',
      targetId: 'build-container',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Security OK',
      style: {
        color: 0x10b981,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'build-container',
      targetId: 'push-registry',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Container Built',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'push-registry',
      targetId: 'deploy-staging',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Image Pushed',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'push-registry',
      targetId: 'smoke-tests',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Image Pushed',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'deploy-staging',
      targetId: 'approval-gate',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Staging Deployed',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'smoke-tests',
      targetId: 'approval-gate',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Smoke Tests OK',
      style: {
        color: 0x10b981,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'approval-gate',
      targetId: 'deploy-production',
      sourceHandle: 'output-true',
      targetHandle: 'input',
      label: 'Approved',
      style: {
        color: 0x10b981,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'approval-gate',
      targetId: 'rollback',
      sourceHandle: 'output-false',
      targetHandle: 'input',
      label: 'Rejected',
      style: {
        color: 0xf97316,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'deploy-production',
      targetId: 'monitoring-setup',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Production Deployed',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
  ],
  viewport: { x: 0, y: 0, zoom: 0.6 },
  createdAt: new Date('2024-01-17'),
  updatedAt: new Date('2024-01-17'),
  author: 'DevOps Team',
  version: '1.0.0',
};

export const IOT_DEVICE_MONITORING: NodeTemplate = {
  id: 'iot-device-monitoring',
  name: 'IoT Device Monitoring System',
  description: 'Comprehensive IoT device monitoring with real-time data collection, anomaly detection, predictive maintenance, and automated alerts.',
  category: 'iot',
  tags: ['iot', 'monitoring', 'sensors', 'predictive-maintenance', 'real-time', 'alerts'],
  nodes: [
    {
      id: 'device-registry',
      type: 'data-transform',
      position: { x: 100, y: 100 },
      data: {
        label: 'Device Registry',
        properties: {
          deviceTypes: ['temperature', 'pressure', 'vibration', 'humidity'],
          registration: 'auto',
          metadata: true,
        },
      },
    },
    {
      id: 'data-ingestion',
      type: 'websocket',
      position: { x: 300, y: 100 },
      data: {
        label: 'Real-time Data Ingestion',
        properties: {
          protocol: 'MQTT',
          topic: 'sensors/#',
          qos: 1,
          bufferSize: 1000,
        },
      },
    },
    {
      id: 'data-validation',
      type: 'data-validation',
      position: { x: 500, y: 100 },
      data: {
        label: 'Data Validation',
        properties: {
          schema: 'iot-sensor-schema',
          requiredFields: ['deviceId', 'timestamp', 'value'],
          rangeValidation: true,
        },
      },
    },
    {
      id: 'anomaly-detection',
      type: 'api-call',
      position: { x: 700, y: 50 },
      data: {
        label: 'Anomaly Detection',
        properties: {
          algorithm: 'isolation-forest',
          threshold: 0.95,
          windowSize: 100,
        },
      },
    },
    {
      id: 'predictive-maintenance',
      type: 'api-call',
      position: { x: 700, y: 150 },
      data: {
        label: 'Predictive Maintenance',
        properties: {
          model: 'time-series-forecasting',
          predictionHorizon: 24,
          confidence: 0.8,
        },
      },
    },
    {
      id: 'data-storage',
      type: 'data-transform',
      position: { x: 900, y: 100 },
      data: {
        label: 'Time Series Storage',
        properties: {
          database: 'influxdb',
          retention: '30d',
          compression: true,
        },
      },
    },
    {
      id: 'alert-engine',
      type: 'decision',
      position: { x: 1100, y: 100 },
      data: {
        label: 'Alert Engine',
        properties: {
          conditions: [
            { type: 'threshold', field: 'temperature', operator: '>', value: 80 },
            { type: 'anomaly', score: 0.9 },
            { type: 'prediction', maintenance: '< 12h' },
          ],
        },
      },
    },
    {
      id: 'notification-service',
      type: 'notification',
      position: { x: 1300, y: 50 },
      data: {
        label: 'Alert Notifications',
        properties: {
          channels: ['email', 'sms', 'webhook'],
          priority: 'high',
          escalation: true,
        },
      },
    },
    {
      id: 'maintenance-scheduler',
      type: 'api-call',
      position: { x: 1300, y: 150 },
      data: {
        label: 'Maintenance Scheduler',
        properties: {
          autoSchedule: true,
          technicianAssignment: 'round-robin',
          partsOrdering: true,
        },
      },
    },
    {
      id: 'dashboard-update',
      type: 'api-call',
      position: { x: 1500, y: 100 },
      data: {
        label: 'Dashboard Update',
        properties: {
          refreshRate: 30,
          realTimeCharts: true,
          historicalData: true,
        },
      },
    },
  ],
  edges: [
    {
      sourceId: 'device-registry',
      targetId: 'data-ingestion',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Device Config',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'data-ingestion',
      targetId: 'data-validation',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Sensor Data',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'data-validation',
      targetId: 'anomaly-detection',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Validated Data',
      style: {
        color: 0x10b981,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'data-validation',
      targetId: 'predictive-maintenance',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Validated Data',
      style: {
        color: 0x10b981,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'data-validation',
      targetId: 'data-storage',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Validated Data',
      style: {
        color: 0x10b981,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'anomaly-detection',
      targetId: 'alert-engine',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Anomaly Score',
      style: {
        color: 0xf97316,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'predictive-maintenance',
      targetId: 'alert-engine',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Maintenance Prediction',
      style: {
        color: 0xf59e0b,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'data-storage',
      targetId: 'alert-engine',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Historical Data',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'alert-engine',
      targetId: 'notification-service',
      sourceHandle: 'output-true',
      targetHandle: 'input',
      label: 'Alert Triggered',
      style: {
        color: 0xf97316,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'alert-engine',
      targetId: 'maintenance-scheduler',
      sourceHandle: 'output-true',
      targetHandle: 'input',
      label: 'Maintenance Needed',
      style: {
        color: 0xf59e0b,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'alert-engine',
      targetId: 'dashboard-update',
      sourceHandle: 'output-false',
      targetHandle: 'input',
      label: 'Normal Operation',
      style: {
        color: 0x10b981,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'notification-service',
      targetId: 'dashboard-update',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Alert Sent',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'maintenance-scheduler',
      targetId: 'dashboard-update',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Maintenance Scheduled',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
  ],
  viewport: { x: 0, y: 0, zoom: 0.7 },
  createdAt: new Date('2024-01-18'),
  updatedAt: new Date('2024-01-18'),
  author: 'IoT Team',
  version: '1.0.0',
};

export const REAL_TIME_ANALYTICS_DASHBOARD: NodeTemplate = {
  id: 'real-time-analytics-dashboard',
  name: 'Real-Time Analytics Dashboard',
  description: 'Streaming data analytics platform with real-time processing, complex event processing, and interactive dashboards.',
  category: 'analytics',
  tags: ['real-time', 'streaming', 'analytics', 'dashboard', 'cep', 'visualization'],
  nodes: [
    {
      id: 'data-streams',
      type: 'websocket',
      position: { x: 100, y: 100 },
      data: {
        label: 'Data Streams',
        properties: {
          sources: ['kafka', 'kinesis', 'eventhub'],
          topics: ['user-events', 'system-metrics', 'business-events'],
          format: 'json',
        },
      },
    },
    {
      id: 'stream-processing',
      type: 'data-transform',
      position: { x: 300, y: 100 },
      data: {
        label: 'Stream Processing',
        properties: {
          engine: 'apache-flink',
          windowType: 'tumbling',
          windowSize: 60,
        },
      },
    },
    {
      id: 'complex-event-processing',
      type: 'data-transform',
      position: { x: 500, y: 50 },
      data: {
        label: 'Complex Event Processing',
        properties: {
          patterns: ['sequence', 'and', 'or'],
          timeWindow: 300,
          conditions: 'custom-rules',
        },
      },
    },
    {
      id: 'real-time-aggregation',
      type: 'aggregate',
      position: { x: 500, y: 150 },
      data: {
        label: 'Real-Time Aggregation',
        properties: {
          functions: ['count', 'sum', 'avg', 'max', 'min'],
          groupBy: ['userId', 'eventType', 'region'],
          emitFrequency: 10,
        },
      },
    },
    {
      id: 'anomaly-detection',
      type: 'api-call',
      position: { x: 700, y: 100 },
      data: {
        label: 'Real-Time Anomaly Detection',
        properties: {
          algorithm: 'streaming-ml',
          sensitivity: 'medium',
          adaptiveThreshold: true,
        },
      },
    },
    {
      id: 'data-enrichment',
      type: 'join',
      position: { x: 900, y: 100 },
      data: {
        label: 'Data Enrichment',
        properties: {
          joinType: 'left',
          lookupTable: 'user-profiles',
          cacheEnabled: true,
          cacheTTL: 3600,
        },
      },
    },
    {
      id: 'alerts-thresholds',
      type: 'decision',
      position: { x: 1100, y: 50 },
      data: {
        label: 'Alert Thresholds',
        properties: {
          conditions: [
            { metric: 'errorRate', operator: '>', value: 5 },
            { metric: 'latency', operator: '>', value: 1000 },
            { metric: 'throughput', operator: '<', value: 100 },
          ],
        },
      },
    },
    {
      id: 'notification-system',
      type: 'notification',
      position: { x: 1100, y: 150 },
      data: {
        label: 'Notification System',
        properties: {
          channels: ['slack', 'teams', 'email'],
          templates: 'custom',
          deduplication: true,
        },
      },
    },
    {
      id: 'dashboard-service',
      type: 'api-call',
      position: { x: 1300, y: 100 },
      data: {
        label: 'Dashboard Service',
        properties: {
          framework: 'grafana',
          refreshRate: 5,
          realTimeUpdates: true,
        },
      },
    },
    {
      id: 'data-export',
      type: 'api-call',
      position: { x: 1500, y: 100 },
      data: {
        label: 'Data Export',
        properties: {
          destinations: ['s3', 'bigquery', 'redshift'],
          format: 'parquet',
          partitioning: 'date-hour',
        },
      },
    },
  ],
  edges: [
    {
      sourceId: 'data-streams',
      targetId: 'stream-processing',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Raw Events',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: true,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'stream-processing',
      targetId: 'complex-event-processing',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Processed Events',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: true,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'stream-processing',
      targetId: 'real-time-aggregation',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Processed Events',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: true,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'complex-event-processing',
      targetId: 'anomaly-detection',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Complex Events',
      style: {
        color: 0x8b5cf6,
        width: 2,
        opacity: 1,
        animated: true,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'real-time-aggregation',
      targetId: 'anomaly-detection',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Aggregated Metrics',
      style: {
        color: 0x10b981,
        width: 2,
        opacity: 1,
        animated: true,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'anomaly-detection',
      targetId: 'data-enrichment',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Anomaly Scores',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: true,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'data-enrichment',
      targetId: 'alerts-thresholds',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Enriched Data',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: true,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'data-enrichment',
      targetId: 'notification-system',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Enriched Data',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: true,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'alerts-thresholds',
      targetId: 'notification-system',
      sourceHandle: 'output-true',
      targetHandle: 'input',
      label: 'Threshold Breached',
      style: {
        color: 0xf97316,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'data-enrichment',
      targetId: 'dashboard-service',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Enriched Data',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: true,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'notification-system',
      targetId: 'dashboard-service',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Alert Notifications',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'dashboard-service',
      targetId: 'data-export',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Dashboard Data',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: true,
        dashed: false,
        arrowSize: 6,
      },
    },
  ],
  viewport: { x: 0, y: 0, zoom: 0.7 },
  createdAt: new Date('2024-01-19'),
  updatedAt: new Date('2024-01-19'),
  author: 'Analytics Team',
  version: '1.0.0',
};

export const SECURITY_INCIDENT_RESPONSE: NodeTemplate = {
  id: 'security-incident-response',
  name: 'Security Incident Response System',
  description: 'Automated security incident detection, analysis, containment, and remediation with compliance reporting.',
  category: 'security',
  tags: ['security', 'incident-response', 'threat-detection', 'compliance', 'forensics', 'remediation'],
  nodes: [
    {
      id: 'threat-intelligence',
      type: 'api-call',
      position: { x: 100, y: 50 },
      data: {
        label: 'Threat Intelligence Feed',
        properties: {
          sources: ['crowdstrike', 'palo-alto', 'microsoft'],
          updateFrequency: 15,
          confidenceThreshold: 0.7,
        },
      },
    },
    {
      id: 'log-aggregation',
      type: 'data-transform',
      position: { x: 100, y: 150 },
      data: {
        label: 'Log Aggregation',
        properties: {
          sources: ['firewall', 'ids', 'endpoint', 'cloud'],
          format: 'cef',
          retention: '90d',
        },
      },
    },
    {
      id: 'anomaly-detection',
      type: 'api-call',
      position: { x: 300, y: 100 },
      data: {
        label: 'Behavioral Anomaly Detection',
        properties: {
          baselinePeriod: 30,
          sensitivity: 'high',
          falsePositiveRate: 0.05,
        },
      },
    },
    {
      id: 'correlation-engine',
      type: 'data-transform',
      position: { x: 500, y: 100 },
      data: {
        label: 'Event Correlation',
        properties: {
          rules: 'sigma-rules',
          timeWindow: 300,
          minimumMatches: 3,
        },
      },
    },
    {
      id: 'incident-classification',
      type: 'decision',
      position: { x: 700, y: 100 },
      data: {
        label: 'Incident Classification',
        properties: {
          severityLevels: ['low', 'medium', 'high', 'critical'],
          categories: ['malware', 'intrusion', 'data-breach', 'ddos'],
        },
      },
    },
    {
      id: 'containment-actions',
      type: 'api-call',
      position: { x: 900, y: 50 },
      data: {
        label: 'Automated Containment',
        properties: {
          actions: ['isolate-host', 'block-ip', 'disable-account'],
          approvalRequired: 'high-severity',
          rollbackEnabled: true,
        },
      },
    },
    {
      id: 'forensic-collection',
      type: 'api-call',
      position: { x: 900, y: 150 },
      data: {
        label: 'Digital Forensics',
        properties: {
          evidenceTypes: ['memory', 'disk', 'network'],
          chainOfCustody: true,
          encryption: 'aes256',
        },
      },
    },
    {
      id: 'notification-system',
      type: 'notification',
      position: { x: 1100, y: 100 },
      data: {
        label: 'Stakeholder Notifications',
        properties: {
          recipients: ['soc-team', 'ciso', 'legal'],
          escalationMatrix: true,
          secureChannel: true,
        },
      },
    },
    {
      id: 'remediation-workflow',
      type: 'api-call',
      position: { x: 1300, y: 100 },
      data: {
        label: 'Remediation Workflow',
        properties: {
          playbook: 'incident-response',
          automatedSteps: true,
          manualApproval: 'critical-changes',
        },
      },
    },
    {
      id: 'compliance-reporting',
      type: 'api-call',
      position: { x: 1500, y: 100 },
      data: {
        label: 'Compliance Reporting',
        properties: {
          standards: ['nist', 'iso27001', 'gdpr'],
          reportFormats: ['pdf', 'json', 'xml'],
          retention: '7y',
        },
      },
    },
  ],
  edges: [
    {
      sourceId: 'threat-intelligence',
      targetId: 'anomaly-detection',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Threat Data',
      style: {
        color: 0xf97316,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'log-aggregation',
      targetId: 'anomaly-detection',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Security Logs',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'anomaly-detection',
      targetId: 'correlation-engine',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Anomalies Detected',
      style: {
        color: 0xf97316,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'correlation-engine',
      targetId: 'incident-classification',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Correlated Events',
      style: {
        color: 0xf97316,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'incident-classification',
      targetId: 'containment-actions',
      sourceHandle: 'output-high',
      targetHandle: 'input',
      label: 'High Severity',
      style: {
        color: 0xdc2626,
        width: 3,
        opacity: 1,
        animated: true,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'incident-classification',
      targetId: 'forensic-collection',
      sourceHandle: 'output-medium',
      targetHandle: 'input',
      label: 'Medium Severity',
      style: {
        color: 0xf97316,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'containment-actions',
      targetId: 'notification-system',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Containment Complete',
      style: {
        color: 0x10b981,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'forensic-collection',
      targetId: 'notification-system',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Evidence Collected',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'notification-system',
      targetId: 'remediation-workflow',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Stakeholders Notified',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'remediation-workflow',
      targetId: 'compliance-reporting',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Remediation Complete',
      style: {
        color: 0x10b981,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
  ],
  viewport: { x: 0, y: 0, zoom: 0.7 },
  createdAt: new Date('2024-01-20'),
  updatedAt: new Date('2024-01-20'),
  author: 'Security Team',
  version: '1.0.0',
};

export const COMMUNICATION_AUTOMATION: NodeTemplate = {
  id: 'communication-automation',
  name: 'Communication Automation Platform',
  description: 'Multi-channel communication automation with intelligent routing, personalization, and engagement tracking.',
  category: 'communication',
  tags: ['communication', 'automation', 'multi-channel', 'personalization', 'engagement', 'routing'],
  nodes: [
    {
      id: 'event-trigger',
      type: 'webhook',
      position: { x: 100, y: 100 },
      data: {
        label: 'Event Triggers',
        properties: {
          events: ['user-signup', 'purchase', 'support-ticket', 'abandoned-cart'],
          sources: ['website', 'mobile-app', 'api', 'email'],
        },
      },
    },
    {
      id: 'user-segmentation',
      type: 'data-transform',
      position: { x: 300, y: 50 },
      data: {
        label: 'User Segmentation',
        properties: {
          criteria: ['demographics', 'behavior', 'lifecycle-stage'],
          dynamicSegments: true,
          realTimeUpdates: true,
        },
      },
    },
    {
      id: 'content-personalization',
      type: 'api-call',
      position: { x: 300, y: 150 },
      data: {
        label: 'Content Personalization',
        properties: {
          engine: 'ai-powered',
          variables: ['name', 'location', 'preferences', 'history'],
          abTesting: true,
        },
      },
    },
    {
      id: 'channel-selection',
      type: 'decision',
      position: { x: 500, y: 100 },
      data: {
        label: 'Channel Selection',
        properties: {
          channels: ['email', 'sms', 'push', 'in-app', 'webhook'],
          priority: ['user-preference', 'urgency', 'cost'],
          fallback: true,
        },
      },
    },
    {
      id: 'message-composer',
      type: 'api-call',
      position: { x: 700, y: 50 },
      data: {
        label: 'Message Composer',
        properties: {
          templates: 'dynamic',
          mediaSupport: true,
          localization: true,
          compliance: 'can-spam',
        },
      },
    },
    {
      id: 'sms-gateway',
      type: 'api-call',
      position: { x: 700, y: 150 },
      data: {
        label: 'SMS Gateway',
        properties: {
          provider: 'twilio',
          deliveryTracking: true,
          optOutHandling: true,
        },
      },
    },
    {
      id: 'email-service',
      type: 'api-call',
      position: { x: 700, y: 250 },
      data: {
        label: 'Email Service',
        properties: {
          provider: 'sendgrid',
          tracking: 'full',
          spamFiltering: true,
        },
      },
    },
    {
      id: 'delivery-optimization',
      type: 'api-call',
      position: { x: 900, y: 100 },
      data: {
        label: 'Delivery Optimization',
        properties: {
          scheduling: 'intelligent',
          timezone: 'user-local',
          frequencyCapping: true,
        },
      },
    },
    {
      id: 'engagement-tracking',
      type: 'api-call',
      position: { x: 1100, y: 100 },
      data: {
        label: 'Engagement Tracking',
        properties: {
          metrics: ['open', 'click', 'conversion', 'unsubscribe'],
          realTime: true,
          attribution: 'multi-touch',
        },
      },
    },
    {
      id: 'follow-up-automation',
      type: 'decision',
      position: { x: 1300, y: 100 },
      data: {
        label: 'Follow-up Automation',
        properties: {
          triggers: ['no-response', 'partial-engagement', 'conversion'],
          delay: 'intelligent',
          maxAttempts: 3,
        },
      },
    },
    {
      id: 'analytics-dashboard',
      type: 'api-call',
      position: { x: 1500, y: 100 },
      data: {
        label: 'Analytics Dashboard',
        properties: {
          reports: 'automated',
          alerts: 'performance-drops',
          exportFormats: ['csv', 'pdf', 'api'],
        },
      },
    },
  ],
  edges: [
    {
      sourceId: 'event-trigger',
      targetId: 'user-segmentation',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Event Data',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'event-trigger',
      targetId: 'content-personalization',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Event Data',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'user-segmentation',
      targetId: 'channel-selection',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'User Segments',
      style: {
        color: 0x10b981,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'content-personalization',
      targetId: 'channel-selection',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Personalized Content',
      style: {
        color: 0x8b5cf6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'channel-selection',
      targetId: 'message-composer',
      sourceHandle: 'output-email',
      targetHandle: 'input',
      label: 'Email Channel',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'channel-selection',
      targetId: 'sms-gateway',
      sourceHandle: 'output-sms',
      targetHandle: 'input',
      label: 'SMS Channel',
      style: {
        color: 0x10b981,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'channel-selection',
      targetId: 'email-service',
      sourceHandle: 'output-email',
      targetHandle: 'input',
      label: 'Email Channel',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'message-composer',
      targetId: 'delivery-optimization',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Composed Message',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'sms-gateway',
      targetId: 'delivery-optimization',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'SMS Sent',
      style: {
        color: 0x10b981,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'email-service',
      targetId: 'delivery-optimization',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Email Sent',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'delivery-optimization',
      targetId: 'engagement-tracking',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Delivery Events',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'engagement-tracking',
      targetId: 'follow-up-automation',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Engagement Data',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'follow-up-automation',
      targetId: 'channel-selection',
      sourceHandle: 'output-followup',
      targetHandle: 'input',
      label: 'Follow-up Trigger',
      style: {
        color: 0xf59e0b,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
    {
      sourceId: 'engagement-tracking',
      targetId: 'analytics-dashboard',
      sourceHandle: 'output',
      targetHandle: 'input',
      label: 'Analytics Data',
      style: {
        color: 0x3b82f6,
        width: 2,
        opacity: 1,
        animated: false,
        dashed: false,
        arrowSize: 6,
      },
    },
  ],
  viewport: { x: 0, y: 0, zoom: 0.6 },
  createdAt: new Date('2024-01-21'),
  updatedAt: new Date('2024-01-21'),
  author: 'Marketing Team',
  version: '1.0.0',
};
