import { PropertyDefinition, NodeType } from '../types/studio';

// Property definitions for each node type
export const NODE_PROPERTY_DEFINITIONS: Record<NodeType, PropertyDefinition[]> = {
  // Flow Control
  'start': [],
  'end': [],
  'decision': [
    {
      key: 'conditions',
      label: 'Conditions',
      type: 'json',
      description: 'Array of conditions to evaluate',
      defaultValue: [],
    },
    {
      key: 'defaultPath',
      label: 'Default Path',
      type: 'select',
      options: [
        { value: 'true', label: 'True' },
        { value: 'false', label: 'False' },
      ],
      defaultValue: 'false',
    },
  ],
  'condition': [
    {
      key: 'expression',
      label: 'Expression',
      type: 'code',
      language: 'javascript',
      description: 'JavaScript expression to evaluate',
      required: true,
    },
    {
      key: 'trueLabel',
      label: 'True Label',
      type: 'text',
      defaultValue: 'True',
    },
    {
      key: 'falseLabel',
      label: 'False Label',
      type: 'text',
      defaultValue: 'False',
    },
  ],
  'switch': [
    {
      key: 'expression',
      label: 'Switch Expression',
      type: 'code',
      language: 'javascript',
      description: 'Expression to switch on',
      required: true,
    },
    {
      key: 'cases',
      label: 'Cases',
      type: 'json',
      description: 'Array of case-value pairs',
      defaultValue: [],
    },
    {
      key: 'defaultCase',
      label: 'Default Case',
      type: 'text',
      description: 'Default case value',
    },
  ],
  'loop': [
    {
      key: 'type',
      label: 'Loop Type',
      type: 'select',
      options: [
        { value: 'for', label: 'For Loop' },
        { value: 'while', label: 'While Loop' },
        { value: 'foreach', label: 'For Each' },
      ],
      defaultValue: 'for',
    },
    {
      key: 'iterations',
      label: 'Iterations',
      type: 'number',
      min: 1,
      max: 1000,
      defaultValue: 10,
    },
    {
      key: 'condition',
      label: 'Condition',
      type: 'code',
      language: 'javascript',
      description: 'Loop condition (for while loops)',
    },
  ],
  'parallel': [
    {
      key: 'branches',
      label: 'Number of Branches',
      type: 'number',
      min: 2,
      max: 10,
      defaultValue: 2,
    },
    {
      key: 'waitForAll',
      label: 'Wait for All',
      type: 'boolean',
      description: 'Wait for all branches to complete',
      defaultValue: true,
    },
  ],
  'merge': [
    {
      key: 'strategy',
      label: 'Merge Strategy',
      type: 'select',
      options: [
        { value: 'first', label: 'First Complete' },
        { value: 'all', label: 'Wait for All' },
        { value: 'any', label: 'Any Complete' },
      ],
      defaultValue: 'first',
    },
  ],
  'wait': [
    {
      key: 'condition',
      label: 'Wait Condition',
      type: 'code',
      language: 'javascript',
      description: 'Condition to wait for',
      required: true,
    },
    {
      key: 'timeout',
      label: 'Timeout (ms)',
      type: 'number',
      min: 1000,
      max: 3600000,
      defaultValue: 30000,
    },
  ],
  'delay': [
    {
      key: 'duration',
      label: 'Duration',
      type: 'number',
      min: 100,
      max: 3600000,
      defaultValue: 1000,
    },
    {
      key: 'unit',
      label: 'Unit',
      type: 'select',
      options: [
        { value: 'milliseconds', label: 'Milliseconds' },
        { value: 'seconds', label: 'Seconds' },
        { value: 'minutes', label: 'Minutes' },
      ],
      defaultValue: 'milliseconds',
    },
  ],
  'timer': [
    {
      key: 'schedule',
      label: 'Schedule',
      type: 'text',
      description: 'Cron expression or schedule',
      placeholder: '0 0 * * *',
      required: true,
    },
    {
      key: 'timezone',
      label: 'Timezone',
      type: 'text',
      defaultValue: 'UTC',
    },
  ],
  'split': [
    {
      key: 'conditions',
      label: 'Split Conditions',
      type: 'json',
      description: 'Array of conditions for each path',
      defaultValue: [],
    },
  ],

  // Data Processing
  'data-transform': [
    {
      key: 'transformation',
      label: 'Transformation Code',
      type: 'code',
      language: 'javascript',
      description: 'JavaScript code to transform data',
      required: true,
    },
    {
      key: 'inputFormat',
      label: 'Input Format',
      type: 'select',
      options: [
        { value: 'json', label: 'JSON' },
        { value: 'xml', label: 'XML' },
        { value: 'csv', label: 'CSV' },
        { value: 'text', label: 'Text' },
      ],
      defaultValue: 'json',
    },
    {
      key: 'outputFormat',
      label: 'Output Format',
      type: 'select',
      options: [
        { value: 'json', label: 'JSON' },
        { value: 'xml', label: 'XML' },
        { value: 'csv', label: 'CSV' },
        { value: 'text', label: 'Text' },
      ],
      defaultValue: 'json',
    },
  ],
  'filter': [
    {
      key: 'conditions',
      label: 'Filter Conditions',
      type: 'json',
      description: 'Array of filter conditions',
      defaultValue: [],
    },
    {
      key: 'operator',
      label: 'Operator',
      type: 'select',
      options: [
        { value: 'AND', label: 'AND' },
        { value: 'OR', label: 'OR' },
      ],
      defaultValue: 'AND',
    },
  ],
  'sort': [
    {
      key: 'field',
      label: 'Sort Field',
      type: 'text',
      description: 'Field to sort by',
      required: true,
    },
    {
      key: 'order',
      label: 'Sort Order',
      type: 'select',
      options: [
        { value: 'asc', label: 'Ascending' },
        { value: 'desc', label: 'Descending' },
      ],
      defaultValue: 'asc',
    },
  ],
  'aggregate': [
    {
      key: 'groupBy',
      label: 'Group By',
      type: 'json',
      description: 'Fields to group by',
      defaultValue: [],
    },
    {
      key: 'functions',
      label: 'Aggregate Functions',
      type: 'json',
      description: 'Array of aggregate functions',
      defaultValue: [],
    },
  ],
  'join': [
    {
      key: 'type',
      label: 'Join Type',
      type: 'select',
      options: [
        { value: 'inner', label: 'Inner Join' },
        { value: 'left', label: 'Left Join' },
        { value: 'right', label: 'Right Join' },
        { value: 'full', label: 'Full Join' },
      ],
      defaultValue: 'inner',
    },
    {
      key: 'leftField',
      label: 'Left Field',
      type: 'text',
      description: 'Field from left dataset',
      required: true,
    },
    {
      key: 'rightField',
      label: 'Right Field',
      type: 'text',
      description: 'Field from right dataset',
      required: true,
    },
  ],
  'split-data': [
    {
      key: 'delimiter',
      label: 'Delimiter',
      type: 'text',
      defaultValue: ',',
    },
    {
      key: 'maxParts',
      label: 'Max Parts',
      type: 'number',
      min: 1,
      max: 100,
      defaultValue: 10,
    },
  ],
  'data-validation': [
    {
      key: 'rules',
      label: 'Validation Rules',
      type: 'json',
      description: 'Array of validation rules',
      defaultValue: [],
    },
    {
      key: 'strict',
      label: 'Strict Mode',
      type: 'boolean',
      description: 'Fail on first validation error',
      defaultValue: false,
    },
  ],

  // Integration & API
  'api-call': [
    {
      key: 'url',
      label: 'URL',
      type: 'url',
      required: true,
    },
    {
      key: 'method',
      label: 'Method',
      type: 'select',
      options: [
        { value: 'GET', label: 'GET' },
        { value: 'POST', label: 'POST' },
        { value: 'PUT', label: 'PUT' },
        { value: 'DELETE', label: 'DELETE' },
        { value: 'PATCH', label: 'PATCH' },
      ],
      defaultValue: 'GET',
    },
    {
      key: 'headers',
      label: 'Headers',
      type: 'json',
      description: 'Request headers',
      defaultValue: {},
    },
    {
      key: 'timeout',
      label: 'Timeout (ms)',
      type: 'number',
      min: 1000,
      max: 60000,
      defaultValue: 30000,
    },
  ],
  'webhook': [
    {
      key: 'endpoint',
      label: 'Endpoint',
      type: 'url',
      required: true,
    },
    {
      key: 'secret',
      label: 'Secret',
      type: 'password',
      description: 'Webhook secret for verification',
    },
  ],
  'http-request': [
    {
      key: 'url',
      label: 'URL',
      type: 'url',
      required: true,
    },
    {
      key: 'method',
      label: 'Method',
      type: 'select',
      options: [
        { value: 'GET', label: 'GET' },
        { value: 'POST', label: 'POST' },
        { value: 'PUT', label: 'PUT' },
        { value: 'DELETE', label: 'DELETE' },
        { value: 'PATCH', label: 'PATCH' },
      ],
      defaultValue: 'GET',
    },
    {
      key: 'headers',
      label: 'Headers',
      type: 'json',
      defaultValue: {},
    },
    {
      key: 'body',
      label: 'Request Body',
      type: 'textarea',
      description: 'Request body (for POST/PUT/PATCH)',
    },
    {
      key: 'timeout',
      label: 'Timeout (ms)',
      type: 'number',
      min: 1000,
      max: 60000,
      defaultValue: 30000,
    },
  ],
  'graphql': [
    {
      key: 'endpoint',
      label: 'GraphQL Endpoint',
      type: 'url',
      required: true,
    },
    {
      key: 'query',
      label: 'GraphQL Query',
      type: 'code',
      language: 'graphql',
      required: true,
    },
    {
      key: 'variables',
      label: 'Variables',
      type: 'json',
      defaultValue: {},
    },
  ],
  'websocket': [
    {
      key: 'url',
      label: 'WebSocket URL',
      type: 'url',
      required: true,
    },
    {
      key: 'protocol',
      label: 'Protocol',
      type: 'text',
      placeholder: 'Optional protocol',
    },
  ],
  'rest-api': [
    {
      key: 'baseUrl',
      label: 'Base URL',
      type: 'url',
      required: true,
    },
    {
      key: 'endpoints',
      label: 'Endpoints',
      type: 'json',
      description: 'Array of API endpoints',
      defaultValue: [],
    },
  ],

  // Communication
  'email': [
    {
      key: 'to',
      label: 'To',
      type: 'text',
      description: 'Recipient email address',
      required: true,
    },
    {
      key: 'subject',
      label: 'Subject',
      type: 'text',
      required: true,
    },
    {
      key: 'body',
      label: 'Body',
      type: 'textarea',
      required: true,
    },
    {
      key: 'attachments',
      label: 'Attachments',
      type: 'json',
      description: 'Array of attachment file paths',
      defaultValue: [],
    },
  ],
  'sms': [
    {
      key: 'to',
      label: 'To',
      type: 'text',
      description: 'Phone number',
      required: true,
    },
    {
      key: 'message',
      label: 'Message',
      type: 'textarea',
      required: true,
      maxLength: 160,
    },
  ],
  'notification': [
    {
      key: 'title',
      label: 'Title',
      type: 'text',
      required: true,
    },
    {
      key: 'message',
      label: 'Message',
      type: 'textarea',
      required: true,
    },
    {
      key: 'type',
      label: 'Type',
      type: 'select',
      options: [
        { value: 'info', label: 'Info' },
        { value: 'success', label: 'Success' },
        { value: 'warning', label: 'Warning' },
        { value: 'error', label: 'Error' },
      ],
      defaultValue: 'info',
    },
    {
      key: 'channels',
      label: 'Channels',
      type: 'multiselect',
      options: [
        { value: 'email', label: 'Email' },
        { value: 'sms', label: 'SMS' },
        { value: 'slack', label: 'Slack' },
        { value: 'teams', label: 'Teams' },
      ],
      defaultValue: [],
    },
  ],
  'slack': [
    {
      key: 'channel',
      label: 'Channel',
      type: 'text',
      description: 'Slack channel (e.g., #general)',
      required: true,
    },
    {
      key: 'message',
      label: 'Message',
      type: 'textarea',
      required: true,
    },
    {
      key: 'attachments',
      label: 'Attachments',
      type: 'json',
      defaultValue: [],
    },
  ],
  'teams': [
    {
      key: 'channel',
      label: 'Channel',
      type: 'text',
      description: 'Teams channel',
      required: true,
    },
    {
      key: 'message',
      label: 'Message',
      type: 'textarea',
      required: true,
    },
    {
      key: 'attachments',
      label: 'Attachments',
      type: 'json',
      defaultValue: [],
    },
  ],
  'webhook-response': [
    {
      key: 'statusCode',
      label: 'Status Code',
      type: 'number',
      min: 100,
      max: 599,
      defaultValue: 200,
    },
    {
      key: 'headers',
      label: 'Headers',
      type: 'json',
      defaultValue: {},
    },
    {
      key: 'body',
      label: 'Response Body',
      type: 'textarea',
    },
  ],

  // AI/ML
  'ai-model': [
    {
      key: 'model',
      label: 'Model',
      type: 'select',
      options: [
        { value: 'gpt-3.5-turbo', label: 'GPT-3.5 Turbo' },
        { value: 'gpt-4', label: 'GPT-4' },
        { value: 'claude-2', label: 'Claude 2' },
        { value: 'palm-2', label: 'PaLM 2' },
      ],
      required: true,
    },
    {
      key: 'prompt',
      label: 'Prompt',
      type: 'textarea',
      required: true,
    },
    {
      key: 'temperature',
      label: 'Temperature',
      type: 'range',
      min: 0,
      max: 2,
      step: 0.1,
      defaultValue: 0.7,
    },
  ],
  'text-generation': [
    {
      key: 'model',
      label: 'Model',
      type: 'select',
      options: [
        { value: 'gpt-3.5-turbo', label: 'GPT-3.5 Turbo' },
        { value: 'gpt-4', label: 'GPT-4' },
        { value: 'claude-2', label: 'Claude 2' },
      ],
      defaultValue: 'gpt-3.5-turbo',
    },
    {
      key: 'prompt',
      label: 'Prompt',
      type: 'textarea',
      required: true,
    },
    {
      key: 'maxTokens',
      label: 'Max Tokens',
      type: 'number',
      min: 1,
      max: 4000,
      defaultValue: 1000,
    },
    {
      key: 'temperature',
      label: 'Temperature',
      type: 'range',
      min: 0,
      max: 2,
      step: 0.1,
      defaultValue: 0.7,
    },
  ],
  'image-processing': [
    {
      key: 'operation',
      label: 'Operation',
      type: 'select',
      options: [
        { value: 'analyze', label: 'Analyze' },
        { value: 'classify', label: 'Classify' },
        { value: 'detect', label: 'Object Detection' },
        { value: 'ocr', label: 'OCR' },
      ],
      defaultValue: 'analyze',
    },
    {
      key: 'model',
      label: 'Model',
      type: 'text',
      placeholder: 'Model name or endpoint',
      required: true,
    },
    {
      key: 'imageUrl',
      label: 'Image URL',
      type: 'url',
      description: 'URL of the image to process',
    },
  ],
  'classification': [
    {
      key: 'model',
      label: 'Model',
      type: 'text',
      required: true,
    },
    {
      key: 'labels',
      label: 'Labels',
      type: 'json',
      description: 'Array of classification labels',
      defaultValue: [],
    },
    {
      key: 'confidence',
      label: 'Confidence Threshold',
      type: 'range',
      min: 0,
      max: 1,
      step: 0.01,
      defaultValue: 0.8,
    },
  ],
  'sentiment-analysis': [
    {
      key: 'model',
      label: 'Model',
      type: 'text',
      required: true,
    },
    {
      key: 'text',
      label: 'Text',
      type: 'textarea',
      description: 'Text to analyze',
      required: true,
    },
    {
      key: 'language',
      label: 'Language',
      type: 'text',
      defaultValue: 'en',
    },
  ],

  // Database & Storage
  'database': [
    {
      key: 'operation',
      label: 'Operation',
      type: 'select',
      options: [
        { value: 'select', label: 'SELECT' },
        { value: 'insert', label: 'INSERT' },
        { value: 'update', label: 'UPDATE' },
        { value: 'delete', label: 'DELETE' },
      ],
      defaultValue: 'select',
    },
    {
      key: 'table',
      label: 'Table',
      type: 'text',
      required: true,
    },
    {
      key: 'query',
      label: 'Query',
      type: 'code',
      language: 'sql',
      description: 'SQL query or conditions',
    },
  ],
  'file-system': [
    {
      key: 'operation',
      label: 'Operation',
      type: 'select',
      options: [
        { value: 'read', label: 'Read' },
        { value: 'write', label: 'Write' },
        { value: 'delete', label: 'Delete' },
        { value: 'list', label: 'List' },
        { value: 'move', label: 'Move' },
        { value: 'copy', label: 'Copy' },
      ],
      defaultValue: 'read',
    },
    {
      key: 'path',
      label: 'Path',
      type: 'text',
      required: true,
    },
  ],
  's3-storage': [
    {
      key: 'operation',
      label: 'Operation',
      type: 'select',
      options: [
        { value: 'upload', label: 'Upload' },
        { value: 'download', label: 'Download' },
        { value: 'delete', label: 'Delete' },
        { value: 'list', label: 'List' },
      ],
      defaultValue: 'upload',
    },
    {
      key: 'bucket',
      label: 'Bucket',
      type: 'text',
      required: true,
    },
    {
      key: 'key',
      label: 'Key',
      type: 'text',
      description: 'Object key/path',
      required: true,
    },
    {
      key: 'region',
      label: 'Region',
      type: 'text',
      defaultValue: 'us-east-1',
    },
  ],
  'redis': [
    {
      key: 'operation',
      label: 'Operation',
      type: 'select',
      options: [
        { value: 'get', label: 'GET' },
        { value: 'set', label: 'SET' },
        { value: 'del', label: 'DEL' },
        { value: 'expire', label: 'EXPIRE' },
        { value: 'ttl', label: 'TTL' },
      ],
      defaultValue: 'get',
    },
    {
      key: 'key',
      label: 'Key',
      type: 'text',
      required: true,
    },
    {
      key: 'value',
      label: 'Value',
      type: 'textarea',
      description: 'Value (for SET operations)',
    },
  ],
  'mongodb': [
    {
      key: 'operation',
      label: 'Operation',
      type: 'select',
      options: [
        { value: 'find', label: 'Find' },
        { value: 'insert', label: 'Insert' },
        { value: 'update', label: 'Update' },
        { value: 'delete', label: 'Delete' },
      ],
      defaultValue: 'find',
    },
    {
      key: 'collection',
      label: 'Collection',
      type: 'text',
      required: true,
    },
    {
      key: 'query',
      label: 'Query',
      type: 'json',
      description: 'MongoDB query object',
      defaultValue: {},
    },
  ],
  'postgresql': [
    {
      key: 'operation',
      label: 'Operation',
      type: 'select',
      options: [
        { value: 'select', label: 'SELECT' },
        { value: 'insert', label: 'INSERT' },
        { value: 'update', label: 'UPDATE' },
        { value: 'delete', label: 'DELETE' },
      ],
      defaultValue: 'select',
    },
    {
      key: 'table',
      label: 'Table',
      type: 'text',
      required: true,
    },
    {
      key: 'query',
      label: 'Query',
      type: 'code',
      language: 'sql',
      description: 'SQL query',
    },
  ],

  // Business Logic
  'action': [
    {
      key: 'actionType',
      label: 'Action Type',
      type: 'select',
      options: [
        { value: 'custom', label: 'Custom' },
        { value: 'http', label: 'HTTP Request' },
        { value: 'database', label: 'Database' },
        { value: 'file', label: 'File Operation' },
      ],
      defaultValue: 'custom',
    },
    {
      key: 'timeout',
      label: 'Timeout (ms)',
      type: 'number',
      min: 1000,
      max: 300000,
      defaultValue: 30000,
    },
    {
      key: 'retryCount',
      label: 'Retry Count',
      type: 'number',
      min: 0,
      max: 10,
      defaultValue: 3,
    },
  ],
  'script': [
    {
      key: 'language',
      label: 'Language',
      type: 'select',
      options: [
        { value: 'javascript', label: 'JavaScript' },
        { value: 'python', label: 'Python' },
        { value: 'bash', label: 'Bash' },
      ],
      defaultValue: 'javascript',
    },
    {
      key: 'code',
      label: 'Code',
      type: 'code',
      required: true,
    },
    {
      key: 'timeout',
      label: 'Timeout (ms)',
      type: 'number',
      min: 1000,
      max: 300000,
      defaultValue: 30000,
    },
  ],
  'function-call': [
    {
      key: 'functionName',
      label: 'Function Name',
      type: 'text',
      required: true,
    },
    {
      key: 'parameters',
      label: 'Parameters',
      type: 'json',
      description: 'Function parameters',
      defaultValue: {},
    },
  ],
  'business-rule': [
    {
      key: 'ruleName',
      label: 'Rule Name',
      type: 'text',
      required: true,
    },
    {
      key: 'conditions',
      label: 'Conditions',
      type: 'json',
      description: 'Array of conditions',
      defaultValue: [],
    },
    {
      key: 'actions',
      label: 'Actions',
      type: 'json',
      description: 'Array of actions to execute',
      defaultValue: [],
    },
  ],
  'validation-rule': [
    {
      key: 'field',
      label: 'Field',
      type: 'text',
      description: 'Field to validate',
      required: true,
    },
    {
      key: 'rule',
      label: 'Validation Rule',
      type: 'select',
      options: [
        { value: 'required', label: 'Required' },
        { value: 'email', label: 'Email' },
        { value: 'number', label: 'Number' },
        { value: 'min', label: 'Minimum Length' },
        { value: 'max', label: 'Maximum Length' },
        { value: 'pattern', label: 'Pattern' },
      ],
      required: true,
    },
    {
      key: 'message',
      label: 'Error Message',
      type: 'text',
      required: true,
    },
  ],

  // Advanced
  'custom': [],
  'sub-workflow': [
    {
      key: 'workflowId',
      label: 'Workflow ID',
      type: 'text',
      description: 'ID of the sub-workflow to execute',
      required: true,
    },
    {
      key: 'inputs',
      label: 'Input Parameters',
      type: 'json',
      description: 'Parameters to pass to the sub-workflow',
      defaultValue: {},
    },
  ],
  'error-handler': [
    {
      key: 'catchType',
      label: 'Catch Type',
      type: 'select',
      options: [
        { value: 'all', label: 'All Errors' },
        { value: 'specific', label: 'Specific Error Types' },
        { value: 'custom', label: 'Custom Condition' },
      ],
      defaultValue: 'all',
    },
    {
      key: 'retryCount',
      label: 'Retry Count',
      type: 'number',
      min: 0,
      max: 10,
      defaultValue: 3,
    },
    {
      key: 'fallbackAction',
      label: 'Fallback Action',
      type: 'textarea',
      description: 'Action to execute on error',
    },
  ],
};
